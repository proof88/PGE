/*
    ###################################################################################
    PureGLextensionFuncs.cpp
    This file is part of PURE.
    Pure useful GL extension functions and non-1.1 function pointers.
    Made by PR00F88
    EMAIL : PR0o0o0o0o0o0o0o0o0o0oF88@gmail.com
    ###################################################################################
*/

#include "PureBaseIncludes.h"  // PCH
#include "../include/internal/PureGLextensionFuncs.h"
#include "../include/internal/PurePragmas.h"

// non-1.1 WGL function pointers
// --------------------------------------------------------------------------

PFNWGLGETEXTENSIONSSTRINGARBPROC    wglGetExtensionsStringARB = PGENULL;

// pixel format
PFNWGLGETPIXELFORMATATTRIBIVARBPROC wglGetPixelFormatAttribivARB = PGENULL;
PFNWGLGETPIXELFORMATATTRIBFVARBPROC wglGetPixelFormatAttribfvARB = PGENULL;
PFNWGLCHOOSEPIXELFORMATARBPROC      wglChoosePixelFormatARB      = PGENULL;

// VSync
PFNWGLGETSWAPINTERVALEXTPROC        wglGetSwapIntervalEXT = PGENULL;
PFNWGLSWAPINTERVALEXTPROC           wglSwapIntervalEXT    = PGENULL;


// non-1.1 GL function pointers
// --------------------------------------------------------------------------

// multitexturing
PFNGLACTIVETEXTUREARBPROC       glActiveTextureARB        = PGENULL;
PFNGLCLIENTACTIVETEXTUREARBPROC glClientActiveTextureARB  = PGENULL;
PFNGLMULTITEXCOORD1DARBPROC     glMultiTexCoord1dARB      = PGENULL;
PFNGLMULTITEXCOORD1DVARBPROC    glMultiTexCoord1dvARB     = PGENULL;
PFNGLMULTITEXCOORD1FARBPROC     glMultiTexCoord1fARB      = PGENULL;
PFNGLMULTITEXCOORD1FVARBPROC    glMultiTexCoord1fvARB     = PGENULL;
PFNGLMULTITEXCOORD1IARBPROC     glMultiTexCoord1iARB      = PGENULL;
PFNGLMULTITEXCOORD1IVARBPROC    glMultiTexCoord1ivARB     = PGENULL;
PFNGLMULTITEXCOORD1SARBPROC     glMultiTexCoord1sARB      = PGENULL;
PFNGLMULTITEXCOORD1SVARBPROC    glMultiTexCoord1svARB     = PGENULL;
PFNGLMULTITEXCOORD2DARBPROC     glMultiTexCoord2dARB      = PGENULL;
PFNGLMULTITEXCOORD2DVARBPROC    glMultiTexCoord2dvARB     = PGENULL;
PFNGLMULTITEXCOORD2FARBPROC     glMultiTexCoord2fARB      = PGENULL;
PFNGLMULTITEXCOORD2FVARBPROC    glMultiTexCoord2fvARB     = PGENULL;
PFNGLMULTITEXCOORD2IARBPROC     glMultiTexCoord2iARB      = PGENULL;
PFNGLMULTITEXCOORD2IVARBPROC    glMultiTexCoord2ivARB     = PGENULL;
PFNGLMULTITEXCOORD2SARBPROC     glMultiTexCoord2sARB      = PGENULL;
PFNGLMULTITEXCOORD2SVARBPROC    glMultiTexCoord2svARB     = PGENULL;
PFNGLMULTITEXCOORD3DARBPROC     glMultiTexCoord3dARB      = PGENULL;
PFNGLMULTITEXCOORD3DVARBPROC    glMultiTexCoord3dvARB     = PGENULL;
PFNGLMULTITEXCOORD3FARBPROC     glMultiTexCoord3fARB      = PGENULL;
PFNGLMULTITEXCOORD3FVARBPROC    glMultiTexCoord3fvARB     = PGENULL;
PFNGLMULTITEXCOORD3IARBPROC     glMultiTexCoord3iARB      = PGENULL;
PFNGLMULTITEXCOORD3IVARBPROC    glMultiTexCoord3ivARB     = PGENULL;
PFNGLMULTITEXCOORD3SARBPROC     glMultiTexCoord3sARB      = PGENULL;
PFNGLMULTITEXCOORD3SVARBPROC    glMultiTexCoord3svARB     = PGENULL;
PFNGLMULTITEXCOORD4DARBPROC     glMultiTexCoord4dARB      = PGENULL;
PFNGLMULTITEXCOORD4DVARBPROC    glMultiTexCoord4dvARB     = PGENULL;
PFNGLMULTITEXCOORD4FARBPROC     glMultiTexCoord4fARB      = PGENULL;
PFNGLMULTITEXCOORD4FVARBPROC    glMultiTexCoord4fvARB     = PGENULL;
PFNGLMULTITEXCOORD4IARBPROC     glMultiTexCoord4iARB      = PGENULL;
PFNGLMULTITEXCOORD4IVARBPROC    glMultiTexCoord4ivARB     = PGENULL;
PFNGLMULTITEXCOORD4SARBPROC     glMultiTexCoord4sARB      = PGENULL;
PFNGLMULTITEXCOORD4SVARBPROC    glMultiTexCoord4svARB     = PGENULL;

// texture compression
PFNGLCOMPRESSEDTEXIMAGE1DPROC    glCompressedTexImage1DARB    = PGENULL;
PFNGLCOMPRESSEDTEXIMAGE2DPROC    glCompressedTexImage2DARB    = PGENULL;
PFNGLCOMPRESSEDTEXIMAGE3DPROC    glCompressedTexImage3DARB    = PGENULL;
PFNGLCOMPRESSEDTEXSUBIMAGE1DPROC glCompressedTexSubImage1DARB = PGENULL;
PFNGLCOMPRESSEDTEXSUBIMAGE2DPROC glCompressedTexSubImage2DARB = PGENULL;
PFNGLCOMPRESSEDTEXSUBIMAGE3DPROC glCompressedTexSubImage3DARB = PGENULL;
PFNGLGETCOMPRESSEDTEXIMAGEPROC   glGetCompressedTexImageARB   = PGENULL;

// 3D textures
PFNGLTEXIMAGE3DEXTPROC    glTexImage3DEXT    = PGENULL;
PFNGLTEXSUBIMAGE3DEXTPROC glTexSubImage3DEXT = PGENULL;

// multisampling
PFNGLSAMPLECOVERAGEARBPROC glSampleCoverageARB = PGENULL;

// multi draw arrays
PFNGLMULTIDRAWARRAYSEXTPROC   glMultiDrawArraysEXT   = PGENULL;
PFNGLMULTIDRAWELEMENTSEXTPROC glMultiDrawElementsEXT = PGENULL;

// ATI vertex array object
PFNGLNEWOBJECTBUFFERATIPROC         glNewObjectBufferATI         = PGENULL;
PFNGLISOBJECTBUFFERATIPROC          glIsObjectBufferATI          = PGENULL;
PFNGLUPDATEOBJECTBUFFERATIPROC      glUpdateObjectBufferATI      = PGENULL;
PFNGLGETOBJECTBUFFERFVATIPROC       glGetObjectBufferfvATI       = PGENULL;
PFNGLGETOBJECTBUFFERIVATIPROC       glGetObjectBufferivATI       = PGENULL;
PFNGLFREEOBJECTBUFFERATIPROC        glFreeObjectBufferATI        = PGENULL;
PFNGLARRAYOBJECTATIPROC             glArrayObjectATI             = PGENULL;
PFNGLGETARRAYOBJECTFVATIPROC        glGetArrayObjectfvATI        = PGENULL;
PFNGLGETARRAYOBJECTIVATIPROC        glGetArrayObjectivATI        = PGENULL;
PFNGLVARIANTARRAYOBJECTATIPROC      glVariantArrayObjectATI      = PGENULL;
PFNGLGETVARIANTARRAYOBJECTFVATIPROC glGetVariantArrayObjectfvATI = PGENULL;
PFNGLGETVARIANTARRAYOBJECTIVATIPROC glGetVariantArrayObjectivATI = PGENULL;

// ATI map object buffer
PFNGLMAPOBJECTBUFFERATIPROC   glMapObjectBufferATI   = PGENULL;
PFNGLUNMAPOBJECTBUFFERATIPROC glUnmapObjectBufferATI = PGENULL;

// ATI element array
PFNGLELEMENTPOINTERATIPROC        glElementPointerATI        = PGENULL;
PFNGLDRAWELEMENTARRAYATIPROC      glDrawElementArrayATI      = PGENULL;
PFNGLDRAWRANGEELEMENTARRAYATIPROC glDrawRangeElementArrayATI = PGENULL;

// ATI TruForm
PFNGLPNTRIANGLESIATIPROC glPNTrianglesiATI = PGENULL;
PFNGLPNTRIANGLESFATIPROC glPNTrianglesfATI = PGENULL;

// NV vertex array range
PFNGLFLUSHVERTEXARRAYRANGENVPROC glFlushVertexArrayRangeNV = PGENULL;
PFNGLVERTEXARRAYRANGENVPROC      glVertexArrayRangeNV      = PGENULL;

// point parameters
PFNGLPOINTPARAMETERFARBPROC  glPointParameterfARB  = PGENULL;
PFNGLPOINTPARAMETERFVARBPROC glPointParameterfvARB = PGENULL;

// secondary color
PFNGLSECONDARYCOLOR3BEXTPROC      glSecondaryColor3bEXT      = PGENULL;
PFNGLSECONDARYCOLOR3BVEXTPROC     glSecondaryColor3bvEXT     = PGENULL;
PFNGLSECONDARYCOLOR3DEXTPROC      glSecondaryColor3dEXT      = PGENULL;
PFNGLSECONDARYCOLOR3DVEXTPROC     glSecondaryColor3dvEXT     = PGENULL;
PFNGLSECONDARYCOLOR3FEXTPROC      glSecondaryColor3fEXT      = PGENULL;
PFNGLSECONDARYCOLOR3FVEXTPROC     glSecondaryColor3fvEXT     = PGENULL;
PFNGLSECONDARYCOLOR3IEXTPROC      glSecondaryColor3iEXT      = PGENULL;
PFNGLSECONDARYCOLOR3IVEXTPROC     glSecondaryColor3ivEXT     = PGENULL;
PFNGLSECONDARYCOLOR3SEXTPROC      glSecondaryColor3sEXT      = PGENULL;
PFNGLSECONDARYCOLOR3SVEXTPROC     glSecondaryColor3svEXT     = PGENULL;
PFNGLSECONDARYCOLOR3UBEXTPROC     glSecondaryColor3ubEXT     = PGENULL;
PFNGLSECONDARYCOLOR3UBVEXTPROC    glSecondaryColor3ubvEXT    = PGENULL;
PFNGLSECONDARYCOLOR3UIEXTPROC     glSecondaryColor3uiEXT     = PGENULL;
PFNGLSECONDARYCOLOR3UIVEXTPROC    glSecondaryColor3uivEXT    = PGENULL;
PFNGLSECONDARYCOLOR3USEXTPROC     glSecondaryColor3usEXT     = PGENULL;
PFNGLSECONDARYCOLOR3USVEXTPROC    glSecondaryColor3usvEXT    = PGENULL;
PFNGLSECONDARYCOLORPOINTEREXTPROC glSecondaryColorPointerEXT = PGENULL;

// blend func separate
PFNGLBLENDFUNCSEPARATEEXTPROC glBlendFuncSeparateEXT = PGENULL;

// window pos
PFNGLWINDOWPOS2DARBPROC  glWindowPos2dARB  = PGENULL;
PFNGLWINDOWPOS2DVARBPROC glWindowPos2dvARB = PGENULL;
PFNGLWINDOWPOS2FARBPROC  glWindowPos2fARB  = PGENULL;
PFNGLWINDOWPOS2FVARBPROC glWindowPos2fvARB = PGENULL;
PFNGLWINDOWPOS2IARBPROC  glWindowPos2iARB  = PGENULL;
PFNGLWINDOWPOS2IVARBPROC glWindowPos2ivARB = PGENULL;
PFNGLWINDOWPOS2SARBPROC  glWindowPos2sARB  = PGENULL;
PFNGLWINDOWPOS2SVARBPROC glWindowPos2svARB = PGENULL;
PFNGLWINDOWPOS3DARBPROC  glWindowPos3dARB  = PGENULL;
PFNGLWINDOWPOS3DVARBPROC glWindowPos3dvARB = PGENULL;
PFNGLWINDOWPOS3FARBPROC  glWindowPos3fARB  = PGENULL;
PFNGLWINDOWPOS3FVARBPROC glWindowPos3fvARB = PGENULL;
PFNGLWINDOWPOS3IARBPROC  glWindowPos3iARB  = PGENULL;
PFNGLWINDOWPOS3IVARBPROC glWindowPos3ivARB = PGENULL;
PFNGLWINDOWPOS3SARBPROC  glWindowPos3sARB  = PGENULL;
PFNGLWINDOWPOS3SVARBPROC glWindowPos3svARB = PGENULL;

// occlusion query
PFNGLGENQUERIESARBPROC        glGenQueriesARB        = PGENULL;
PFNGLDELETEQUERIESARBPROC     glDeleteQueriesARB     = PGENULL;
PFNGLISQUERYARBPROC           glIsQueryARB           = PGENULL;
PFNGLBEGINQUERYARBPROC        glBeginQueryARB        = PGENULL;
PFNGLENDQUERYARBPROC          glEndQueryARB          = PGENULL;
PFNGLGETQUERYIVARBPROC        glGetQueryivARB        = PGENULL;
PFNGLGETQUERYOBJECTIVARBPROC  glGetQueryObjectivARB  = PGENULL;
PFNGLGETQUERYOBJECTUIVARBPROC glGetQueryObjectuivARB = PGENULL;

// compiled vertex array
PFNGLLOCKARRAYSEXTPROC   glLockArraysEXT   = PGENULL;
PFNGLUNLOCKARRAYSEXTPROC glUnlockArraysEXT = PGENULL;

// drawRangeElements
PFNGLDRAWRANGEELEMENTSEXTPROC glDrawRangeElementsEXT = PGENULL;

// vertex buffer object
PFNGLGENBUFFERSARBPROC           glGenBuffersARB           = PGENULL;
PFNGLBINDBUFFERARBPROC           glBindBufferARB           = PGENULL;
PFNGLBUFFERDATAARBPROC           glBufferDataARB           = PGENULL;
PFNGLBUFFERSUBDATAARBPROC        glBufferSubDataARB        = PGENULL;
PFNGLGETBUFFERSUBDATAARBPROC     glGetBufferSubDataARB     = PGENULL;
PFNGLDELETEBUFFERSARBPROC        glDeleteBuffersARB        = PGENULL;
PFNGLISBUFFERARBPROC             glIsBufferARB             = PGENULL;
PFNGLMAPBUFFERARBPROC            glMapBufferARB            = PGENULL;
PFNGLUNMAPBUFFERARBPROC          glUnmapBufferARB          = PGENULL;
PFNGLGETBUFFERPARAMETERIVARBPROC glGetBufferParameterivARB = PGENULL;
PFNGLGETBUFFERPOINTERVARBPROC    glGetBufferPointervARB    = PGENULL;

// shader objects
PFNGLDELETEOBJECTARBPROC         glDeleteObjectARB         = PGENULL;
PFNGLGETHANDLEARBPROC            glGetHandleARB            = PGENULL;
PFNGLDETACHOBJECTARBPROC         glDetachObjectARB         = PGENULL;
PFNGLCREATESHADEROBJECTARBPROC   glCreateShaderObjectARB   = PGENULL;
PFNGLSHADERSOURCEARBPROC         glShaderSourceARB         = PGENULL;
PFNGLCOMPILESHADERARBPROC        glCompileShaderARB        = PGENULL;
PFNGLCREATEPROGRAMOBJECTARBPROC  glCreateProgramObjectARB  = PGENULL;
PFNGLATTACHOBJECTARBPROC         glAttachObjectARB         = PGENULL;
PFNGLLINKPROGRAMARBPROC          glLinkProgramARB          = PGENULL;
PFNGLUSEPROGRAMOBJECTARBPROC     glUseProgramObjectARB     = PGENULL;
PFNGLVALIDATEPROGRAMARBPROC      glValidateProgramARB      = PGENULL;
PFNGLUNIFORM1FARBPROC            glUniform1fARB            = PGENULL;
PFNGLUNIFORM2FARBPROC            glUniform2fARB            = PGENULL;
PFNGLUNIFORM3FARBPROC            glUniform3fARB            = PGENULL;
PFNGLUNIFORM4FARBPROC            glUniform4fARB            = PGENULL;
PFNGLUNIFORM1IARBPROC            glUniform1iARB            = PGENULL;
PFNGLUNIFORM2IARBPROC            glUniform2iARB            = PGENULL;
PFNGLUNIFORM3IARBPROC            glUniform3iARB            = PGENULL;
PFNGLUNIFORM4IARBPROC            glUniform4iARB            = PGENULL;
PFNGLUNIFORM1FVARBPROC           glUniform1fvARB           = PGENULL;
PFNGLUNIFORM2FVARBPROC           glUniform2fvARB           = PGENULL;
PFNGLUNIFORM3FVARBPROC           glUniform3fvARB           = PGENULL;
PFNGLUNIFORM4FVARBPROC           glUniform4fvARB           = PGENULL;
PFNGLUNIFORM1IVARBPROC           glUniform1ivARB           = PGENULL;
PFNGLUNIFORM2IVARBPROC           glUniform2ivARB           = PGENULL;
PFNGLUNIFORM3IVARBPROC           glUniform3ivARB           = PGENULL;
PFNGLUNIFORM4IVARBPROC           glUniform4ivARB           = PGENULL;
PFNGLUNIFORMMATRIX2FVARBPROC     glUniformMatrix2fvARB     = PGENULL;
PFNGLUNIFORMMATRIX3FVARBPROC     glUniformMatrix3fvARB     = PGENULL;
PFNGLUNIFORMMATRIX4FVARBPROC     glUniformMatrix4fvARB     = PGENULL;
PFNGLGETOBJECTPARAMETERFVARBPROC glGetObjectParameterfvARB = PGENULL;
PFNGLGETOBJECTPARAMETERIVARBPROC glGetObjectParameterivARB = PGENULL;
PFNGLGETINFOLOGARBPROC           glGetInfoLogARB           = PGENULL;
PFNGLGETATTACHEDOBJECTSARBPROC   glGetAttachedObjectsARB   = PGENULL;
PFNGLGETUNIFORMLOCATIONARBPROC   glGetUniformLocationARB   = PGENULL;
PFNGLGETACTIVEUNIFORMARBPROC     glGetActiveUniformARB     = PGENULL;
PFNGLGETUNIFORMFVARBPROC         glGetUniformfvARB         = PGENULL;
PFNGLGETUNIFORMIVARBPROC         glGetUniformivARB         = PGENULL;
PFNGLGETSHADERSOURCEARBPROC      glGetShaderSourceARB      = PGENULL;

// vertex shader
PFNGLBINDATTRIBLOCATIONARBPROC glBindAttribLocationARB = PGENULL;
PFNGLGETACTIVEATTRIBARBPROC    glGetActiveAttribARB    = PGENULL;
PFNGLGETATTRIBLOCATIONARBPROC  glGetAttribLocationARB  = PGENULL;

// draw buffers
PFNGLDRAWBUFFERSARBPROC glDrawBuffersARB = PGENULL;

// framebuffer object
PFNGLISRENDERBUFFERPROC                        glIsRenderbuffer                      = PGENULL;
PFNGLBINDRENDERBUFFERPROC                      glBindRenderbuffer                    = PGENULL;
PFNGLDELETERENDERBUFFERSPROC                   glDeleteRenderbuffers                 = PGENULL;
PFNGLGENRENDERBUFFERSPROC                      glGenRenderbuffers                    = PGENULL;
PFNGLRENDERBUFFERSTORAGEPROC                   glRenderbufferStorage                 = PGENULL;
PFNGLGETRENDERBUFFERPARAMETERIVPROC            glGetRenderbufferParameteriv          = PGENULL;
PFNGLISFRAMEBUFFERPROC                         glIsFramebuffer                       = PGENULL;
PFNGLBINDFRAMEBUFFERPROC                       glBindFramebuffer                     = PGENULL;
PFNGLDELETEFRAMEBUFFERSPROC                    glDeleteFramebuffers                  = PGENULL;
PFNGLGENFRAMEBUFFERSPROC                       glGenFramebuffers                     = PGENULL;
PFNGLCHECKFRAMEBUFFERSTATUSPROC                glCheckFramebufferStatus              = PGENULL;
PFNGLFRAMEBUFFERTEXTURE1DPROC                  glFramebufferTexture1D                = PGENULL;
PFNGLFRAMEBUFFERTEXTURE2DPROC                  glFramebufferTexture2D                = PGENULL;
PFNGLFRAMEBUFFERTEXTURE3DPROC                  glFramebufferTexture3D                = PGENULL;
PFNGLFRAMEBUFFERRENDERBUFFERPROC               glFramebufferRenderbuffer             = PGENULL;
PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVPROC   glGetFramebufferAttachmentParameteriv = PGENULL;
PFNGLGENERATEMIPMAPPROC                        glGenerateMipmap                      = PGENULL;
PFNGLBLITFRAMEBUFFERPROC                       glBlitFramebuffer                     = PGENULL;
PFNGLRENDERBUFFERSTORAGEMULTISAMPLEPROC        glRenderbufferStorageMultisample      = PGENULL;
PFNGLFRAMEBUFFERTEXTURELAYERPROC               glFramebufferTextureLayer             = PGENULL;

// vertex array object
PFNGLBINDVERTEXARRAYPROC     glBindVertexArray    = PGENULL;
PFNGLDELETEVERTEXARRAYSPROC  glDeleteVertexArrays = PGENULL;
PFNGLGENVERTEXARRAYSPROC     glGenVertexArrays    = PGENULL;
PFNGLISVERTEXARRAYPROC       glIsVertexArray      = PGENULL;

// ATI separate stencil
PFNGLSTENCILOPSEPARATEATIPROC   glStencilOpSeparateATI   = PGENULL;
PFNGLSTENCILFUNCSEPARATEATIPROC glStencilFuncSeparateATI = PGENULL;

// Two side stencil
PFNGLACTIVESTENCILFACEEXTPROC glActiveStencilFaceEXT = PGENULL;

// Conditional rendering
PFNGLBEGINCONDITIONALRENDERNVPROC glBeginConditionalRenderNV = PGENULL;
PFNGLENDCONDITIONALRENDERNVPROC   glEndConditionalRenderNV   = PGENULL;

// Floating point internal formats
PFNGLCLAMPCOLORARBPROC glClampColorARB = PGENULL;

// NV depth buffer float
PFNGLDEPTHRANGEDNVPROC  glDepthRangedNV  = PGENULL; 
PFNGLCLEARDEPTHDNVPROC  glClearDepthdNV  = PGENULL;
PFNGLDEPTHBOUNDSDNVPROC glDepthBoundsdNV = PGENULL;

// NV half-floats
PFNGLVERTEX2HNVPROC          glVertex2hNV          = PGENULL;
PFNGLVERTEX2HVNVPROC         glVertex2hvNV         = PGENULL;
PFNGLVERTEX3HNVPROC          glVertex3hNV          = PGENULL;
PFNGLVERTEX3HVNVPROC         glVertex3hvNV         = PGENULL;
PFNGLVERTEX4HNVPROC          glVertex4hNV          = PGENULL;
PFNGLVERTEX4HVNVPROC         glVertex4hvNV         = PGENULL;
PFNGLNORMAL3HNVPROC          glNormal3hNV          = PGENULL;
PFNGLNORMAL3HVNVPROC         glNormal3hvNV         = PGENULL;
PFNGLCOLOR3HNVPROC           glColor3hNV           = PGENULL;
PFNGLCOLOR3HVNVPROC          glColor3hvNV          = PGENULL;
PFNGLCOLOR4HNVPROC           glColor4hNV           = PGENULL;
PFNGLCOLOR4HVNVPROC          glColor4hvNV          = PGENULL;
PFNGLTEXCOORD1HNVPROC        glTexCoord1hNV        = PGENULL;
PFNGLTEXCOORD1HVNVPROC       glTexCoord1hvNV       = PGENULL;
PFNGLTEXCOORD2HNVPROC        glTexCoord2hNV        = PGENULL;
PFNGLTEXCOORD2HVNVPROC       glTexCoord2hvNV       = PGENULL;
PFNGLTEXCOORD3HNVPROC        glTexCoord3hNV        = PGENULL;
PFNGLTEXCOORD3HVNVPROC       glTexCoord3hvNV       = PGENULL;
PFNGLTEXCOORD4HNVPROC        glTexCoord4hNV        = PGENULL;
PFNGLTEXCOORD4HVNVPROC       glTexCoord4hvNV       = PGENULL;
PFNGLMULTITEXCOORD1HNVPROC   glMultiTexCoord1hNV   = PGENULL;
PFNGLMULTITEXCOORD1HVNVPROC  glMultiTexCoord1hvNV  = PGENULL;
PFNGLMULTITEXCOORD2HNVPROC   glMultiTexCoord2hNV   = PGENULL;
PFNGLMULTITEXCOORD2HVNVPROC  glMultiTexCoord2hvNV  = PGENULL;
PFNGLMULTITEXCOORD3HNVPROC   glMultiTexCoord3hNV   = PGENULL;
PFNGLMULTITEXCOORD3HVNVPROC  glMultiTexCoord3hvNV  = PGENULL;
PFNGLMULTITEXCOORD4HNVPROC   glMultiTexCoord4hNV   = PGENULL;
PFNGLMULTITEXCOORD4HVNVPROC  glMultiTexCoord4hvNV  = PGENULL;
PFNGLFOGCOORDHNVPROC         glFogCoordhNV         = PGENULL;
PFNGLFOGCOORDHVNVPROC        glFogCoordhvNV        = PGENULL;
PFNGLSECONDARYCOLOR3HNVPROC  glSecondaryColor3hNV  = PGENULL;
PFNGLSECONDARYCOLOR3HVNVPROC glSecondaryColor3hvNV = PGENULL;
PFNGLVERTEXWEIGHTHNVPROC     glVertexWeighthNV     = PGENULL;
PFNGLVERTEXWEIGHTHVNVPROC    glVertexWeighthvNV    = PGENULL;
PFNGLVERTEXATTRIB1HNVPROC    glVertexAttrib1hNV    = PGENULL;
PFNGLVERTEXATTRIB1HVNVPROC   glVertexAttrib1hvNV   = PGENULL;
PFNGLVERTEXATTRIB2HNVPROC    glVertexAttrib2hNV    = PGENULL;
PFNGLVERTEXATTRIB2HVNVPROC   glVertexAttrib2hvNV   = PGENULL;
PFNGLVERTEXATTRIB3HNVPROC    glVertexAttrib3hNV    = PGENULL;
PFNGLVERTEXATTRIB3HVNVPROC   glVertexAttrib3hvNV   = PGENULL;
PFNGLVERTEXATTRIB4HNVPROC    glVertexAttrib4hNV    = PGENULL;
PFNGLVERTEXATTRIB4HVNVPROC   glVertexAttrib4hvNV   = PGENULL;
PFNGLVERTEXATTRIBS1HVNVPROC  glVertexAttribs1hvNV  = PGENULL;
PFNGLVERTEXATTRIBS2HVNVPROC  glVertexAttribs2hvNV  = PGENULL;
PFNGLVERTEXATTRIBS3HVNVPROC  glVertexAttribs3hvNV  = PGENULL;
PFNGLVERTEXATTRIBS4HVNVPROC  glVertexAttribs4hvNV  = PGENULL;

// Integer texture parameters
PFNGLTEXPARAMETERIIVEXTPROC      glTexParameterIivEXT     = PGENULL;
PFNGLTEXPARAMETERIUIVEXTPROC     glTexParameterIuivEXT    = PGENULL;
PFNGLGETTEXPARAMETERIIVEXTPROC   glGetTexParameterIivEXT  = PGENULL; 
PFNGLGETTEXPARAMETERIUIVEXTPROC  glGetTexParameterIuivEXT = PGENULL;
PFNGLCLEARCOLORIIEXTPROC         glClearColorIiEXT        = PGENULL;
PFNGLCLEARCOLORIUIEXTPROC        glClearColorIuiEXT       = PGENULL;

// Draw buffers 2
PFNGLCOLORMASKINDEXEDEXTPROC    glColorMaskIndexedEXT    = PGENULL;
PFNGLGETBOOLEANINDEXEDVEXTPROC  glGetBooleanIndexedvEXT  = PGENULL;
PFNGLGETINTEGERINDEXEDVEXTPROC  glGetIntegerIndexedvEXT  = PGENULL;
PFNGLENABLEINDEXEDEXTPROC       glEnableIndexedEXT       = PGENULL;
PFNGLDISABLEINDEXEDEXTPROC      glDisableIndexedEXT      = PGENULL;
PFNGLISENABLEDINDEXEDEXTPROC    glIsEnabledIndexedEXT    = PGENULL;

// Transform feedback EXT
PFNGLBEGINTRANSFORMFEEDBACKEXTPROC       glBeginTransformFeedbackEXT      = PGENULL;
PFNGLENDTRANSFORMFEEDBACKEXTPROC         glEndTransformFeedbackEXT        = PGENULL;
PFNGLBINDBUFFERRANGEEXTPROC              glBindBufferRangeEXT             = PGENULL;
PFNGLBINDBUFFEROFFSETEXTPROC             glBindBufferOffsetEXT            = PGENULL;
PFNGLBINDBUFFERBASEEXTPROC               glBindBufferBaseEXT              = PGENULL;
PFNGLTRANSFORMFEEDBACKVARYINGSEXTPROC    glTransformFeedbackVaryingsEXT   = PGENULL;
PFNGLGETTRANSFORMFEEDBACKVARYINGEXTPROC  glGetTransformFeedbackVaryingEXT = PGENULL;

// Uniform buffer object
PFNGLDRAWARRAYSINSTANCEDPROC    glDrawArraysInstanced    = PGENULL;
PFNGLDRAWELEMENTSINSTANCEDPROC  glDrawElementsInstanced  = PGENULL;
PFNGLTEXBUFFERPROC              glTexBuffer              = PGENULL;
PFNGLPRIMITIVERESTARTINDEXPROC  glPrimitiveRestartIndex  = PGENULL;

// Instanced draw
PFNGLDRAWARRAYSINSTANCEDARBPROC   glDrawArraysInstancedARB   = PGENULL;
PFNGLDRAWELEMENTSINSTANCEDARBPROC glDrawElementsInstancedARB = PGENULL;

// Buffer copy
PFNGLCOPYBUFFERSUBDATAPROC glCopyBufferSubData = PGENULL;

// Primitive restart
PFNGLPRIMITIVERESTARTNVPROC      glPrimitiveRestartNV      = PGENULL;
PFNGLPRIMITIVERESTARTINDEXNVPROC glPrimitiveRestartIndexNV = PGENULL;

// Texture buffer object
PFNGLTEXBUFFERARBPROC glTexBufferARB = PGENULL;

// API robustness
PFNGLGETGRAPHICSRESETSTATUSARBPROC  glGetGraphicsResetStatusARB = PGENULL;
PFNGLGETNMAPDVARBPROC               glGetnMapdvARB              = PGENULL;
PFNGLGETNMAPFVARBPROC               glGetnMapfvARB              = PGENULL;
PFNGLGETNMAPIVARBPROC               glGetnMapivARB              = PGENULL;
PFNGLGETNPIXELMAPFVARBPROC          glGetnPixelMapfvARB         = PGENULL;
PFNGLGETNPIXELMAPUIVARBPROC         glGetnPixelMapuivARB        = PGENULL;
PFNGLGETNPIXELMAPUSVARBPROC         glGetnPixelMapusvARB        = PGENULL;
PFNGLGETNPOLYGONSTIPPLEARBPROC      glGetnPolygonStippleARB     = PGENULL;
PFNGLGETNCOLORTABLEARBPROC          glGetnColorTableARB         = PGENULL;
PFNGLGETNCONVOLUTIONFILTERARBPROC   glGetnConvolutionFilterARB  = PGENULL;
PFNGLGETNSEPARABLEFILTERARBPROC     glGetnSeparableFilterARB    = PGENULL;
PFNGLGETNHISTOGRAMARBPROC           glGetnHistogramARB          = PGENULL;
PFNGLGETNMINMAXARBPROC              glGetnMinmaxARB             = PGENULL;
PFNGLGETNTEXIMAGEARBPROC            glGetnTexImageARB           = PGENULL;
PFNGLREADNPIXELSARBPROC             glReadnPixelsARB            = PGENULL;
PFNGLGETNCOMPRESSEDTEXIMAGEARBPROC  glGetnCompressedTexImageARB = PGENULL;
PFNGLGETNUNIFORMFVARBPROC           glGetnUniformfvARB          = PGENULL;
PFNGLGETNUNIFORMIVARBPROC           glGetnUniformivARB          = PGENULL;
PFNGLGETNUNIFORMUIVARBPROC          glGetnUniformuivARB         = PGENULL;
PFNGLGETNUNIFORMDVARBPROC           glGetnUniformdvARB          = PGENULL;

// Draw elements base vertex
PFNGLDRAWELEMENTSBASEVERTEXPROC           glDrawElementsBaseVertex          = PGENULL;
PFNGLDRAWRANGEELEMENTSBASEVERTEXPROC      glDrawRangeElementsBaseVertex     = PGENULL;
PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXPROC  glDrawElementsInstancedBaseVertex = PGENULL;
PFNGLMULTIDRAWELEMENTSBASEVERTEXPROC      glMultiDrawElementsBaseVertex     = PGENULL;

// Provoking vertex
PFNGLPROVOKINGVERTEXPROC glProvokingVertex = PGENULL;

// Texture multisample
PFNGLTEXIMAGE2DMULTISAMPLEPROC glTexImage2DMultisample = PGENULL;
PFNGLTEXIMAGE3DMULTISAMPLEPROC glTexImage3DMultisample = PGENULL;
PFNGLGETMULTISAMPLEFVPROC      glGetMultisamplefv      = PGENULL;
PFNGLSAMPLEMASKIPROC           glSampleMaski           = PGENULL;

// Sync
PFNGLFENCESYNCPROC       glFenceSync      = PGENULL;
PFNGLISSYNCPROC          glIsSync         = PGENULL;
PFNGLDELETESYNCPROC      glDeleteSync     = PGENULL;
PFNGLCLIENTWAITSYNCPROC  glClientWaitSync = PGENULL;
PFNGLWAITSYNCPROC        glWaitSync       = PGENULL;
PFNGLGETINTEGER64VPROC   glGetInteger64v  = PGENULL;
PFNGLGETSYNCIVPROC       glGetSynciv      = PGENULL;

// Geometry shader
PFNGLPROGRAMPARAMETERIARBPROC       glProgramParameteriARB       = PGENULL;
PFNGLFRAMEBUFFERTEXTUREARBPROC      glFramebufferTextureARB      = PGENULL;
PFNGLFRAMEBUFFERTEXTURELAYERARBPROC glFramebufferTextureLayerARB = PGENULL;
PFNGLFRAMEBUFFERTEXTUREFACEARBPROC  glFramebufferTextureFaceARB  = PGENULL;

// Extended blend source
PFNGLBINDFRAGDATALOCATIONINDEXEDPROC glBindFragDataLocationIndexed = PGENULL;
PFNGLGETFRAGDATAINDEXPROC            glGetFragDataIndex            = PGENULL;

// Sampler objects
PFNGLGENSAMPLERSPROC             glGenSamplers             = PGENULL;
PFNGLDELETESAMPLERSPROC          glDeleteSamplers          = PGENULL;
PFNGLISSAMPLERPROC               glIsSampler               = PGENULL;
PFNGLBINDSAMPLERPROC             glBindSampler             = PGENULL;
PFNGLSAMPLERPARAMETERIPROC       glSamplerParameteri       = PGENULL;
PFNGLSAMPLERPARAMETERIVPROC      glSamplerParameteriv      = PGENULL;
PFNGLSAMPLERPARAMETERFPROC       glSamplerParameterf       = PGENULL;
PFNGLSAMPLERPARAMETERFVPROC      glSamplerParameterfv      = PGENULL;
PFNGLSAMPLERPARAMETERIIVPROC     glSamplerParameterIiv     = PGENULL;
PFNGLSAMPLERPARAMETERIUIVPROC    glSamplerParameterIuiv    = PGENULL;
PFNGLGETSAMPLERPARAMETERIVPROC   glGetSamplerParameteriv   = PGENULL;
PFNGLGETSAMPLERPARAMETERIIVPROC  glGetSamplerParameterIiv  = PGENULL;
PFNGLGETSAMPLERPARAMETERFVPROC   glGetSamplerParameterfv   = PGENULL;
PFNGLGETSAMPLERPARAMETERIUIVPROC glGetSamplerParameterIuiv = PGENULL;

// Timer query
PFNGLQUERYCOUNTERPROC         glQueryCounter        = PGENULL;
PFNGLGETQUERYOBJECTI64VPROC   glGetQueryObjecti64v  = PGENULL; 
PFNGLGETQUERYOBJECTUI64VPROC  glGetQueryObjectui64v = PGENULL;

// Instanced arrays
PFNGLVERTEXATTRIBDIVISORARBPROC glVertexAttribDivisorARB = PGENULL;

// Vertex type 2.10.10.10 rev
PFNGLVERTEXP2UIPROC          glVertexP2ui          = PGENULL;
PFNGLVERTEXP2UIVPROC         glVertexP2uiv         = PGENULL;
PFNGLVERTEXP3UIPROC          glVertexP3ui          = PGENULL;
PFNGLVERTEXP3UIVPROC         glVertexP3uiv         = PGENULL;
PFNGLVERTEXP4UIPROC          glVertexP4ui          = PGENULL;
PFNGLVERTEXP4UIVPROC         glVertexP4uiv         = PGENULL;
PFNGLTEXCOORDP1UIPROC        glTexCoordP1ui        = PGENULL;
PFNGLTEXCOORDP1UIVPROC       glTexCoordP1uiv       = PGENULL;
PFNGLTEXCOORDP2UIPROC        glTexCoordP2ui        = PGENULL;
PFNGLTEXCOORDP2UIVPROC       glTexCoordP2uiv       = PGENULL;
PFNGLTEXCOORDP3UIPROC        glTexCoordP3ui        = PGENULL;
PFNGLTEXCOORDP3UIVPROC       glTexCoordP3uiv       = PGENULL;
PFNGLTEXCOORDP4UIPROC        glTexCoordP4ui        = PGENULL;
PFNGLTEXCOORDP4UIVPROC       glTexCoordP4uiv       = PGENULL;
PFNGLMULTITEXCOORDP1UIPROC   glMultiTexCoordP1ui   = PGENULL;
PFNGLMULTITEXCOORDP1UIVPROC  glMultiTexCoordP1uiv  = PGENULL;
PFNGLMULTITEXCOORDP2UIPROC   glMultiTexCoordP2ui   = PGENULL;
PFNGLMULTITEXCOORDP2UIVPROC  glMultiTexCoordP2uiv  = PGENULL;
PFNGLMULTITEXCOORDP3UIPROC   glMultiTexCoordP3ui   = PGENULL;
PFNGLMULTITEXCOORDP3UIVPROC  glMultiTexCoordP3uiv  = PGENULL;
PFNGLMULTITEXCOORDP4UIPROC   glMultiTexCoordP4ui   = PGENULL;
PFNGLMULTITEXCOORDP4UIVPROC  glMultiTexCoordP4uiv  = PGENULL;
PFNGLNORMALP3UIPROC          glNormalP3ui          = PGENULL;
PFNGLNORMALP3UIVPROC         glNormalP3uiv         = PGENULL;
PFNGLCOLORP3UIPROC           glColorP3ui           = PGENULL;
PFNGLCOLORP3UIVPROC          glColorP3uiv          = PGENULL; 
PFNGLCOLORP4UIPROC           glColorP4ui           = PGENULL;
PFNGLCOLORP4UIVPROC          glColorP4uiv          = PGENULL; 
PFNGLSECONDARYCOLORP3UIPROC  glSecondaryColorP3ui  = PGENULL;
PFNGLSECONDARYCOLORP3UIVPROC glSecondaryColorP3uiv = PGENULL;
PFNGLVERTEXATTRIBP1UIPROC    glVertexAttribP1ui    = PGENULL;
PFNGLVERTEXATTRIBP1UIVPROC   glVertexAttribP1uiv   = PGENULL;
PFNGLVERTEXATTRIBP2UIPROC    glVertexAttribP2ui    = PGENULL;
PFNGLVERTEXATTRIBP2UIVPROC   glVertexAttribP2uiv   = PGENULL;
PFNGLVERTEXATTRIBP3UIPROC    glVertexAttribP3ui    = PGENULL;
PFNGLVERTEXATTRIBP3UIVPROC   glVertexAttribP3uiv   = PGENULL;
PFNGLVERTEXATTRIBP4UIPROC    glVertexAttribP4ui    = PGENULL;
PFNGLVERTEXATTRIBP4UIVPROC   glVertexAttribP4uiv   = PGENULL;

// GPU shader FP64
PFNGLUNIFORM1DPROC          glUniform1d          = PGENULL;
PFNGLUNIFORM2DPROC          glUniform2d          = PGENULL;
PFNGLUNIFORM3DPROC          glUniform3d          = PGENULL;
PFNGLUNIFORM4DPROC          glUniform4d          = PGENULL;
PFNGLUNIFORM1DVPROC         glUniform1dv         = PGENULL;
PFNGLUNIFORM2DVPROC         glUniform2dv         = PGENULL;
PFNGLUNIFORM3DVPROC         glUniform3dv         = PGENULL;
PFNGLUNIFORM4DVPROC         glUniform4dv         = PGENULL;
PFNGLUNIFORMMATRIX2DVPROC   glUniformMatrix2dv   = PGENULL;
PFNGLUNIFORMMATRIX3DVPROC   glUniformMatrix3dv   = PGENULL;
PFNGLUNIFORMMATRIX4DVPROC   glUniformMatrix4dv   = PGENULL;
PFNGLUNIFORMMATRIX2X3DVPROC glUniformMatrix2x3dv = PGENULL;
PFNGLUNIFORMMATRIX2X4DVPROC glUniformMatrix2x4dv = PGENULL;
PFNGLUNIFORMMATRIX3X2DVPROC glUniformMatrix3x2dv = PGENULL;
PFNGLUNIFORMMATRIX3X4DVPROC glUniformMatrix3x4dv = PGENULL;
PFNGLUNIFORMMATRIX4X2DVPROC glUniformMatrix4x2dv = PGENULL;
PFNGLUNIFORMMATRIX4X3DVPROC glUniformMatrix4x3dv = PGENULL;
PFNGLGETUNIFORMDVPROC       glGetUniformdv       = PGENULL;

// Shader subroutine
PFNGLGETSUBROUTINEUNIFORMLOCATIONPROC    glGetSubroutineUniformLocation   = PGENULL; 
PFNGLGETSUBROUTINEINDEXPROC              glGetSubroutineIndex             = PGENULL;
PFNGLGETACTIVESUBROUTINEUNIFORMIVPROC    glGetActiveSubroutineUniformiv   = PGENULL;
PFNGLGETACTIVESUBROUTINEUNIFORMNAMEPROC  glGetActiveSubroutineUniformName = PGENULL;
PFNGLGETACTIVESUBROUTINENAMEPROC         glGetActiveSubroutineName        = PGENULL;
PFNGLUNIFORMSUBROUTINESUIVPROC           glUniformSubroutinesuiv          = PGENULL;
PFNGLGETUNIFORMSUBROUTINEUIVPROC         glGetUniformSubroutineuiv        = PGENULL;
PFNGLGETPROGRAMSTAGEIVPROC               glGetProgramStageiv              = PGENULL;

// Draw indirect
PFNGLDRAWARRAYSINDIRECTPROC   glDrawArraysIndirect   = PGENULL;
PFNGLDRAWELEMENTSINDIRECTPROC glDrawElementsIndirect = PGENULL;

// Minimum sample shading
PFNGLMINSAMPLESHADINGARBPROC glMinSampleShadingARB = PGENULL;

// Tessellation
PFNGLPATCHPARAMETERIPROC  glPatchParameteri  = PGENULL; 
PFNGLPATCHPARAMETERFVPROC glPatchParameterfv = PGENULL;

// Transform feedback 2
PFNGLBINDTRANSFORMFEEDBACKPROC     glBindTransformFeedback    = PGENULL;
PFNGLDELETETRANSFORMFEEDBACKSPROC  glDeleteTransformFeedbacks = PGENULL;
PFNGLGENTRANSFORMFEEDBACKSPROC     glGenTransformFeedbacks    = PGENULL;
PFNGLISTRANSFORMFEEDBACKPROC       glIsTransformFeedback      = PGENULL;
PFNGLPAUSETRANSFORMFEEDBACKPROC    glPauseTransformFeedback   = PGENULL;
PFNGLRESUMETRANSFORMFEEDBACKPROC   glResumeTransformFeedback  = PGENULL; 
PFNGLDRAWTRANSFORMFEEDBACKPROC     glDrawTransformFeedback    = PGENULL;

// Transform feedback 3
PFNGLDRAWTRANSFORMFEEDBACKSTREAMPROC glDrawTransformFeedbackStream = PGENULL;
PFNGLBEGINQUERYINDEXEDPROC           glBeginQueryIndexed           = PGENULL;
PFNGLENDQUERYINDEXEDPROC             glEndQueryIndexed             = PGENULL;
PFNGLGETQUERYINDEXEDIVPROC           glGetQueryIndexediv           = PGENULL;

// Draw buffers blend
PFNGLBLENDEQUATIONIARBPROC         glBlendEquationiARB         = PGENULL;
PFNGLBLENDEQUATIONSEPARATEIARBPROC glBlendEquationSeparateiARB = PGENULL;
PFNGLBLENDFUNCIARBPROC             glBlendFunciARB             = PGENULL;
PFNGLBLENDFUNCSEPARATEIARBPROC     glBlendFuncSeparateiARB     = PGENULL;

// Program binary
PFNGLGETPROGRAMBINARYPROC  glGetProgramBinary  = PGENULL;
PFNGLPROGRAMBINARYPROC     glProgramBinary     = PGENULL;
PFNGLPROGRAMPARAMETERIPROC glProgramParameteri = PGENULL;

// Separate shader objects
PFNGLUSEPROGRAMSTAGESPROC          glUseProgramStages          = PGENULL;
PFNGLACTIVESHADERPROGRAMPROC       glActiveShaderProgram       = PGENULL;
PFNGLCREATESHADERPROGRAMVPROC      glCreateShaderProgramv      = PGENULL;
PFNGLBINDPROGRAMPIPELINEPROC       glBindProgramPipeline       = PGENULL;
PFNGLDELETEPROGRAMPIPELINESPROC    glDeleteProgramPipelines    = PGENULL;
PFNGLGENPROGRAMPIPELINESPROC       glGenProgramPipelines       = PGENULL;
PFNGLISPROGRAMPIPELINEPROC         glIsProgramPipeline         = PGENULL;
PFNGLGETPROGRAMPIPELINEIVPROC      glGetProgramPipelineiv      = PGENULL;
PFNGLPROGRAMUNIFORM1IPROC          glProgramUniform1i          = PGENULL;
PFNGLPROGRAMUNIFORM1IVPROC         glProgramUniform1iv         = PGENULL;
PFNGLPROGRAMUNIFORM1FPROC          glProgramUniform1f          = PGENULL;
PFNGLPROGRAMUNIFORM1FVPROC         glProgramUniform1fv         = PGENULL;
PFNGLPROGRAMUNIFORM1DPROC          glProgramUniform1d          = PGENULL;
PFNGLPROGRAMUNIFORM1DVPROC         glProgramUniform1dv         = PGENULL;
PFNGLPROGRAMUNIFORM1UIPROC         glProgramUniform1ui         = PGENULL;
PFNGLPROGRAMUNIFORM1UIVPROC        glProgramUniform1uiv        = PGENULL;
PFNGLPROGRAMUNIFORM2IPROC          glProgramUniform2i          = PGENULL;
PFNGLPROGRAMUNIFORM2IVPROC         glProgramUniform2iv         = PGENULL;
PFNGLPROGRAMUNIFORM2FPROC          glProgramUniform2f          = PGENULL;
PFNGLPROGRAMUNIFORM2FVPROC         glProgramUniform2fv         = PGENULL;
PFNGLPROGRAMUNIFORM2DPROC          glProgramUniform2d          = PGENULL;
PFNGLPROGRAMUNIFORM2DVPROC         glProgramUniform2dv         = PGENULL;
PFNGLPROGRAMUNIFORM2UIPROC         glProgramUniform2ui         = PGENULL;
PFNGLPROGRAMUNIFORM2UIVPROC        glProgramUniform2uiv        = PGENULL;
PFNGLPROGRAMUNIFORM3IPROC          glProgramUniform3i          = PGENULL;
PFNGLPROGRAMUNIFORM3IVPROC         glProgramUniform3iv         = PGENULL;
PFNGLPROGRAMUNIFORM3FPROC          glProgramUniform3f          = PGENULL;
PFNGLPROGRAMUNIFORM3FVPROC         glProgramUniform3fv         = PGENULL;
PFNGLPROGRAMUNIFORM3DPROC          glProgramUniform3d          = PGENULL;
PFNGLPROGRAMUNIFORM3DVPROC         glProgramUniform3dv         = PGENULL;
PFNGLPROGRAMUNIFORM3UIPROC         glProgramUniform3ui         = PGENULL;
PFNGLPROGRAMUNIFORM3UIVPROC        glProgramUniform3uiv        = PGENULL;
PFNGLPROGRAMUNIFORM4IPROC          glProgramUniform4i          = PGENULL;
PFNGLPROGRAMUNIFORM4IVPROC         glProgramUniform4iv         = PGENULL;
PFNGLPROGRAMUNIFORM4FPROC          glProgramUniform4f          = PGENULL;
PFNGLPROGRAMUNIFORM4FVPROC         glProgramUniform4fv         = PGENULL;
PFNGLPROGRAMUNIFORM4DPROC          glProgramUniform4d          = PGENULL;
PFNGLPROGRAMUNIFORM4DVPROC         glProgramUniform4dv         = PGENULL;
PFNGLPROGRAMUNIFORM4UIPROC         glProgramUniform4ui         = PGENULL;
PFNGLPROGRAMUNIFORM4UIVPROC        glProgramUniform4uiv        = PGENULL;
PFNGLPROGRAMUNIFORMMATRIX2FVPROC   glProgramUniformMatrix2fv   = PGENULL;
PFNGLPROGRAMUNIFORMMATRIX3FVPROC   glProgramUniformMatrix3fv   = PGENULL;
PFNGLPROGRAMUNIFORMMATRIX4FVPROC   glProgramUniformMatrix4fv   = PGENULL;
PFNGLPROGRAMUNIFORMMATRIX2DVPROC   glProgramUniformMatrix2dv   = PGENULL;
PFNGLPROGRAMUNIFORMMATRIX3DVPROC   glProgramUniformMatrix3dv   = PGENULL;
PFNGLPROGRAMUNIFORMMATRIX4DVPROC   glProgramUniformMatrix4dv   = PGENULL;
PFNGLPROGRAMUNIFORMMATRIX2X3FVPROC glProgramUniformMatrix2x3fv = PGENULL;
PFNGLPROGRAMUNIFORMMATRIX3X2FVPROC glProgramUniformMatrix3x2fv = PGENULL;
PFNGLPROGRAMUNIFORMMATRIX2X4FVPROC glProgramUniformMatrix2x4fv = PGENULL;
PFNGLPROGRAMUNIFORMMATRIX4X2FVPROC glProgramUniformMatrix4x2fv = PGENULL;
PFNGLPROGRAMUNIFORMMATRIX3X4FVPROC glProgramUniformMatrix3x4fv = PGENULL;
PFNGLPROGRAMUNIFORMMATRIX4X3FVPROC glProgramUniformMatrix4x3fv = PGENULL;
PFNGLPROGRAMUNIFORMMATRIX2X3DVPROC glProgramUniformMatrix2x3dv = PGENULL;
PFNGLPROGRAMUNIFORMMATRIX3X2DVPROC glProgramUniformMatrix3x2dv = PGENULL;
PFNGLPROGRAMUNIFORMMATRIX2X4DVPROC glProgramUniformMatrix2x4dv = PGENULL;
PFNGLPROGRAMUNIFORMMATRIX4X2DVPROC glProgramUniformMatrix4x2dv = PGENULL;
PFNGLPROGRAMUNIFORMMATRIX3X4DVPROC glProgramUniformMatrix3x4dv = PGENULL;
PFNGLPROGRAMUNIFORMMATRIX4X3DVPROC glProgramUniformMatrix4x3dv = PGENULL;
PFNGLVALIDATEPROGRAMPIPELINEPROC   glValidateProgramPipeline   = PGENULL;
PFNGLGETPROGRAMPIPELINEINFOLOGPROC glGetProgramPipelineInfoLog = PGENULL;

// ES2 compatibility
PFNGLRELEASESHADERCOMPILERPROC     glReleaseShaderCompiler    = PGENULL;
PFNGLSHADERBINARYPROC              glShaderBinary             = PGENULL;
PFNGLGETSHADERPRECISIONFORMATPROC  glGetShaderPrecisionFormat = PGENULL;
PFNGLDEPTHRANGEFPROC               glDepthRangef              = PGENULL;
PFNGLCLEARDEPTHFPROC               glClearDepthf              = PGENULL;

// Viewport array
PFNGLVIEWPORTARRAYVPROC    glViewportArrayv    = PGENULL;
PFNGLVIEWPORTINDEXEDFPROC  glViewportIndexedf  = PGENULL; 
PFNGLVIEWPORTINDEXEDFVPROC glViewportIndexedfv = PGENULL;
PFNGLSCISSORARRAYVPROC     glScissorArrayv     = PGENULL;
PFNGLSCISSORINDEXEDPROC    glScissorIndexed    = PGENULL;
PFNGLSCISSORINDEXEDVPROC   glScissorIndexedv   = PGENULL;
PFNGLDEPTHRANGEARRAYVPROC  glDepthRangeArrayv  = PGENULL;
PFNGLDEPTHRANGEINDEXEDPROC glDepthRangeIndexed = PGENULL;
PFNGLGETFLOATI_VPROC       glGetFloati_v       = PGENULL;
PFNGLGETDOUBLEI_VPROC      glGetDoublei_v      = PGENULL;

// Atomic counters
PFNGLGETACTIVEATOMICCOUNTERBUFFERIVPROC glGetActiveAtomicCounterBufferiv = PGENULL;

// Shader image load/store
PFNGLBINDIMAGETEXTUREPROC glBindImageTexture = PGENULL;
PFNGLMEMORYBARRIERPROC    glMemoryBarrier    = PGENULL;

// Texture storage
PFNGLTEXSTORAGE1DPROC        glTexStorage1D        = PGENULL;
PFNGLTEXSTORAGE2DPROC        glTexStorage2D        = PGENULL;
PFNGLTEXSTORAGE3DPROC        glTexStorage3D        = PGENULL;
PFNGLTEXTURESTORAGE1DEXTPROC glTextureStorage1DEXT = PGENULL;
PFNGLTEXTURESTORAGE2DEXTPROC glTextureStorage2DEXT = PGENULL;
PFNGLTEXTURESTORAGE3DEXTPROC glTextureStorage3DEXT = PGENULL;

// Draw transform instanced
PFNGLDRAWTRANSFORMFEEDBACKINSTANCEDPROC       glDrawTransformFeedbackInstanced       = PGENULL;
PFNGLDRAWTRANSFORMFEEDBACKSTREAMINSTANCEDPROC glDrawTransformFeedbackStreamInstanced = PGENULL;

// Instanced rendering from indexed instance
PFNGLDRAWARRAYSINSTANCEDBASEINSTANCEPROC             glDrawArraysInstancedBaseInstance             = PGENULL;
PFNGLDRAWELEMENTSINSTANCEDBASEINSTANCEPROC           glDrawElementsInstancedBaseInstance           = PGENULL;
PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXBASEINSTANCEPROC glDrawElementsInstancedBaseVertexBaseInstance = PGENULL;

// Internal format query
PFNGLGETINTERNALFORMATIVPROC glGetInternalformativ = PGENULL;

// KHR debug
PFNGLDEBUGMESSAGECONTROLPROC  glDebugMessageControl  = PGENULL; 
PFNGLDEBUGMESSAGEINSERTPROC   glDebugMessageInsert   = PGENULL;
PFNGLDEBUGMESSAGECALLBACKPROC glDebugMessageCallback = PGENULL;
PFNGLGETDEBUGMESSAGELOGPROC   glGetDebugMessageLog   = PGENULL;
PFNGLPUSHDEBUGGROUPPROC       glPushDebugGroup       = PGENULL;
PFNGLPOPDEBUGGROUPPROC        glPopDebugGroup        = PGENULL;
PFNGLOBJECTLABELPROC          glObjectLabel          = PGENULL;
PFNGLGETOBJECTLABELPROC       glGetObjectLabel       = PGENULL;
PFNGLOBJECTPTRLABELPROC       glObjectPtrLabel       = PGENULL;
PFNGLGETOBJECTPTRLABELPROC    glGetObjectPtrLabel    = PGENULL;

// Clear buffer object
PFNGLCLEARBUFFERDATAPROC            glClearBufferData            = PGENULL;
PFNGLCLEARBUFFERSUBDATAPROC         glClearBufferSubData         = PGENULL;
PFNGLCLEARNAMEDBUFFERDATAEXTPROC    glClearNamedBufferDataEXT    = PGENULL;
PFNGLCLEARNAMEDBUFFERSUBDATAEXTPROC glClearNamedBufferSubDataEXT = PGENULL;

// Compute shaders
PFNGLDISPATCHCOMPUTEPROC          glDispatchCompute         = PGENULL;
PFNGLDISPATCHCOMPUTEINDIRECTPROC  glDispatchComputeIndirect = PGENULL;

// Image copy between image buffers
PFNGLCOPYIMAGESUBDATAPROC glCopyImageSubData = PGENULL;

// Rendering to framebuffer object w/o attachment
PFNGLFRAMEBUFFERPARAMETERIPROC             glFramebufferParameteri             = PGENULL;
PFNGLGETFRAMEBUFFERPARAMETERIVPROC         glGetFramebufferParameteriv         = PGENULL;
PFNGLNAMEDFRAMEBUFFERPARAMETERIEXTPROC     glNamedFramebufferParameteriEXT     = PGENULL;
PFNGLGETNAMEDFRAMEBUFFERPARAMETERIVEXTPROC glGetNamedFramebufferParameterivEXT = PGENULL;

// Generalized query for image formats
PFNGLGETINTERNALFORMATI64VPROC glGetInternalformati64v = PGENULL;

// Invalidate data
PFNGLINVALIDATETEXSUBIMAGEPROC    glInvalidateTexSubImage    = PGENULL;
PFNGLINVALIDATETEXIMAGEPROC       glInvalidateTexImage       = PGENULL;
PFNGLINVALIDATEBUFFERSUBDATAPROC  glInvalidateBufferSubData  = PGENULL; 
PFNGLINVALIDATEBUFFERDATAPROC     glInvalidateBufferData     = PGENULL;
PFNGLINVALIDATEFRAMEBUFFERPROC    glInvalidateFramebuffer    = PGENULL;
PFNGLINVALIDATESUBFRAMEBUFFERPROC glInvalidateSubFramebuffer = PGENULL;

// Multi indirect draw calls from a single draw call
PFNGLMULTIDRAWARRAYSINDIRECTPROC   glMultiDrawArraysIndirect   = PGENULL;
PFNGLMULTIDRAWELEMENTSINDIRECTPROC glMultiDrawElementsIndirect = PGENULL;

// Program object interface query
PFNGLGETPROGRAMINTERFACEIVPROC            glGetProgramInterfaceiv           = PGENULL;
PFNGLGETPROGRAMRESOURCEINDEXPROC          glGetProgramResourceIndex         = PGENULL;
PFNGLGETPROGRAMRESOURCENAMEPROC           glGetProgramResourceName          = PGENULL;
PFNGLGETPROGRAMRESOURCEIVPROC             glGetProgramResourceiv            = PGENULL;
PFNGLGETPROGRAMRESOURCELOCATIONPROC       glGetProgramResourceLocation      = PGENULL;
PFNGLGETPROGRAMRESOURCELOCATIONINDEXPROC  glGetProgramResourceLocationIndex = PGENULL;

// Buffer object read-write access from shader
PFNGLSHADERSTORAGEBLOCKBINDINGPROC glShaderStorageBlockBinding = PGENULL;

// Texture buffer range
PFNGLTEXBUFFERRANGEPROC        glTexBufferRange        = PGENULL;
PFNGLTEXTUREBUFFERRANGEEXTPROC glTextureBufferRangeEXT = PGENULL;

// Immutable storage for multisample textures
PFNGLTEXSTORAGE2DMULTISAMPLEPROC        glTexStorage2DMultisample        = PGENULL;
PFNGLTEXSTORAGE3DMULTISAMPLEPROC        glTexStorage3DMultisample        = PGENULL;
PFNGLTEXTURESTORAGE2DMULTISAMPLEEXTPROC glTextureStorage2DMultisampleEXT = PGENULL;
PFNGLTEXTURESTORAGE3DMULTISAMPLEEXTPROC glTextureStorage3DMultisampleEXT = PGENULL;

// Texture views
PFNGLTEXTUREVIEWPROC glTextureView = PGENULL;

// Separation of vertex format from buffer object
PFNGLBINDVERTEXBUFFERPROC                   glBindVertexBuffer                   = PGENULL;
PFNGLVERTEXATTRIBFORMATPROC                 glVertexAttribFormat                 = PGENULL;
PFNGLVERTEXATTRIBIFORMATPROC                glVertexAttribIFormat                = PGENULL;
PFNGLVERTEXATTRIBLFORMATPROC                glVertexAttribLFormat                = PGENULL;
PFNGLVERTEXATTRIBBINDINGPROC                glVertexAttribBinding                = PGENULL;
PFNGLVERTEXBINDINGDIVISORPROC               glVertexBindingDivisor               = PGENULL;
PFNGLVERTEXARRAYBINDVERTEXBUFFEREXTPROC     glVertexArrayBindVertexBufferEXT     = PGENULL;
PFNGLVERTEXARRAYVERTEXATTRIBFORMATEXTPROC   glVertexArrayVertexAttribFormatEXT   = PGENULL;
PFNGLVERTEXARRAYVERTEXATTRIBIFORMATEXTPROC  glVertexArrayVertexAttribIFormatEXT  = PGENULL; 
PFNGLVERTEXARRAYVERTEXATTRIBLFORMATEXTPROC  glVertexArrayVertexAttribLFormatEXT  = PGENULL; 
PFNGLVERTEXARRAYVERTEXATTRIBBINDINGEXTPROC  glVertexArrayVertexAttribBindingEXT  = PGENULL; 
PFNGLVERTEXARRAYVERTEXBINDINGDIVISOREXTPROC glVertexArrayVertexBindingDivisorEXT = PGENULL;


/**
    Queries OpenGL for all non-1.1 GL and WGL function pointers.
*/
void PureGLgetFunctionPointers()
{
    // non-1.1 WGL function pointers
    wglSwapIntervalEXT           = (PFNWGLSWAPINTERVALEXTPROC)           wglGetProcAddress("wglSwapIntervalEXT");
    wglGetSwapIntervalEXT        = (PFNWGLGETSWAPINTERVALEXTPROC)        wglGetProcAddress("wglGetSwapIntervalEXT");
    wglGetExtensionsStringARB    = (PFNWGLGETEXTENSIONSSTRINGARBPROC)    wglGetProcAddress("wglGetExtensionsStringARB");
    wglGetPixelFormatAttribivARB = (PFNWGLGETPIXELFORMATATTRIBIVARBPROC) wglGetProcAddress("wglGetPixelFormatAttribivARB");
    wglGetPixelFormatAttribfvARB = (PFNWGLGETPIXELFORMATATTRIBFVARBPROC) wglGetProcAddress("wglGetPixelFormatAttribfvARB");
    wglChoosePixelFormatARB      = (PFNWGLCHOOSEPIXELFORMATARBPROC)      wglGetProcAddress("wglChoosePixelFormatARB");
    
    // multitexturing
    glActiveTextureARB           = (PFNGLACTIVETEXTUREARBPROC)       wglGetProcAddress("glActiveTextureARB");
    glClientActiveTextureARB     = (PFNGLCLIENTACTIVETEXTUREARBPROC) wglGetProcAddress("glClientActiveTextureARB");
    glMultiTexCoord1dARB         = (PFNGLMULTITEXCOORD1DARBPROC)     wglGetProcAddress("glMultiTexCoord1dARB");
    glMultiTexCoord1dvARB        = (PFNGLMULTITEXCOORD1DVARBPROC)    wglGetProcAddress("glMultiTexCoord1dvARB");
    glMultiTexCoord1fARB         = (PFNGLMULTITEXCOORD1FARBPROC)     wglGetProcAddress("glMultiTexCoord1fARB");
    glMultiTexCoord1fvARB        = (PFNGLMULTITEXCOORD1FVARBPROC)    wglGetProcAddress("glMultiTexCoord1fvARB");
    glMultiTexCoord1iARB         = (PFNGLMULTITEXCOORD1IARBPROC)     wglGetProcAddress("glMultiTexCoord1iARB");
    glMultiTexCoord1ivARB        = (PFNGLMULTITEXCOORD1IVARBPROC)    wglGetProcAddress("glMultiTexCoord1ivARB");
    glMultiTexCoord1sARB         = (PFNGLMULTITEXCOORD1SARBPROC)     wglGetProcAddress("glMultiTexCoord1sARB");
    glMultiTexCoord1svARB        = (PFNGLMULTITEXCOORD1SVARBPROC)    wglGetProcAddress("glMultiTexCoord1svARB");
    glMultiTexCoord2dARB         = (PFNGLMULTITEXCOORD2DARBPROC)     wglGetProcAddress("glMultiTexCoord2dARB");
    glMultiTexCoord2dvARB        = (PFNGLMULTITEXCOORD2DVARBPROC)    wglGetProcAddress("glMultiTexCoord2dvARB");
    glMultiTexCoord2fARB         = (PFNGLMULTITEXCOORD2FARBPROC)     wglGetProcAddress("glMultiTexCoord2fARB");
    glMultiTexCoord2fvARB        = (PFNGLMULTITEXCOORD2FVARBPROC)    wglGetProcAddress("glMultiTexCoord2fvARB");
    glMultiTexCoord2iARB         = (PFNGLMULTITEXCOORD2IARBPROC)     wglGetProcAddress("glMultiTexCoord2iARB");
    glMultiTexCoord2ivARB        = (PFNGLMULTITEXCOORD2IVARBPROC)    wglGetProcAddress("glMultiTexCoord2ivARB");
    glMultiTexCoord2sARB         = (PFNGLMULTITEXCOORD2SARBPROC)     wglGetProcAddress("glMultiTexCoord2sARB");
    glMultiTexCoord2svARB        = (PFNGLMULTITEXCOORD2SVARBPROC)    wglGetProcAddress("glMultiTexCoord2svARB");
    glMultiTexCoord3dARB         = (PFNGLMULTITEXCOORD3DARBPROC)     wglGetProcAddress("glMultiTexCoord3dARB");
    glMultiTexCoord3dvARB        = (PFNGLMULTITEXCOORD3DVARBPROC)    wglGetProcAddress("glMultiTexCoord3dvARB");
    glMultiTexCoord3fARB         = (PFNGLMULTITEXCOORD3FARBPROC)     wglGetProcAddress("glMultiTexCoord3fARB");
    glMultiTexCoord3fvARB        = (PFNGLMULTITEXCOORD3FVARBPROC)    wglGetProcAddress("glMultiTexCoord3fvARB");
    glMultiTexCoord3iARB         = (PFNGLMULTITEXCOORD3IARBPROC)     wglGetProcAddress("glMultiTexCoord3iARB");
    glMultiTexCoord3ivARB        = (PFNGLMULTITEXCOORD3IVARBPROC)    wglGetProcAddress("glMultiTexCoord3ivARB");
    glMultiTexCoord3sARB         = (PFNGLMULTITEXCOORD3SARBPROC)     wglGetProcAddress("glMultiTexCoord3sARB");
    glMultiTexCoord3svARB        = (PFNGLMULTITEXCOORD3SVARBPROC)    wglGetProcAddress("glMultiTexCoord3svARB");
    glMultiTexCoord4dARB         = (PFNGLMULTITEXCOORD4DARBPROC)     wglGetProcAddress("glMultiTexCoord4dARB");
    glMultiTexCoord4dvARB        = (PFNGLMULTITEXCOORD4DVARBPROC)    wglGetProcAddress("glMultiTexCoord4dvARB");
    glMultiTexCoord4fARB         = (PFNGLMULTITEXCOORD4FARBPROC)     wglGetProcAddress("glMultiTexCoord4fARB");
    glMultiTexCoord4fvARB        = (PFNGLMULTITEXCOORD4FVARBPROC)    wglGetProcAddress("glMultiTexCoord4fvARB");
    glMultiTexCoord4iARB         = (PFNGLMULTITEXCOORD4IARBPROC)     wglGetProcAddress("glMultiTexCoord4iARB");
    glMultiTexCoord4ivARB        = (PFNGLMULTITEXCOORD4IVARBPROC)    wglGetProcAddress("glMultiTexCoord4ivARB");
    glMultiTexCoord4sARB         = (PFNGLMULTITEXCOORD4SARBPROC)     wglGetProcAddress("glMultiTexCoord4sARB");
    glMultiTexCoord4svARB        = (PFNGLMULTITEXCOORD4SVARBPROC)    wglGetProcAddress("glMultiTexCoord4svARB");
    
    // texture compression
    glCompressedTexImage1DARB    = (PFNGLCOMPRESSEDTEXIMAGE1DPROC)    wglGetProcAddress("glCompressedTexImage1DARB");
    glCompressedTexImage2DARB    = (PFNGLCOMPRESSEDTEXIMAGE2DPROC)    wglGetProcAddress("glCompressedTexImage2DARB");
    glCompressedTexImage3DARB    = (PFNGLCOMPRESSEDTEXIMAGE3DPROC)    wglGetProcAddress("glCompressedTexImage3DARB");
    glCompressedTexSubImage1DARB = (PFNGLCOMPRESSEDTEXSUBIMAGE1DPROC) wglGetProcAddress("glCompressedTexSubImage1DARB");
    glCompressedTexSubImage2DARB = (PFNGLCOMPRESSEDTEXSUBIMAGE2DPROC) wglGetProcAddress("glCompressedTexSubImage2DARB");
    glCompressedTexSubImage3DARB = (PFNGLCOMPRESSEDTEXSUBIMAGE3DPROC) wglGetProcAddress("glCompressedTexSubImage3DARB");
    glGetCompressedTexImageARB   = (PFNGLGETCOMPRESSEDTEXIMAGEPROC)   wglGetProcAddress("glGetCompressedTexImageARB");

    // 3D textures
    glTexImage3DEXT    = (PFNGLTEXIMAGE3DEXTPROC)    wglGetProcAddress("glTexImage3DEXT");
    glTexSubImage3DEXT = (PFNGLTEXSUBIMAGE3DEXTPROC) wglGetProcAddress("glTexSubImage3DEXT");
    
    // multisampling
    glSampleCoverageARB = (PFNGLSAMPLECOVERAGEARBPROC) wglGetProcAddress("glSampleCoverageARB");

    // multi draw arrays
    glMultiDrawArraysEXT   = (PFNGLMULTIDRAWARRAYSEXTPROC)   wglGetProcAddress("glMultiDrawArraysEXT");
    glMultiDrawElementsEXT = (PFNGLMULTIDRAWELEMENTSEXTPROC) wglGetProcAddress("glMultiDrawElementsEXT");

    // ATI vertex array object
    glNewObjectBufferATI         = (PFNGLNEWOBJECTBUFFERATIPROC)         wglGetProcAddress("glNewObjectBufferATI");
    glIsObjectBufferATI          = (PFNGLISOBJECTBUFFERATIPROC)          wglGetProcAddress("glIsObjectBufferATI");
    glUpdateObjectBufferATI      = (PFNGLUPDATEOBJECTBUFFERATIPROC)      wglGetProcAddress("glUpdateObjectBufferATI");
    glGetObjectBufferfvATI       = (PFNGLGETOBJECTBUFFERFVATIPROC)       wglGetProcAddress("glGetObjectBufferfvATI");
    glGetObjectBufferivATI       = (PFNGLGETOBJECTBUFFERIVATIPROC)       wglGetProcAddress("glGetObjectBufferivATI");
    glFreeObjectBufferATI        = (PFNGLFREEOBJECTBUFFERATIPROC)        wglGetProcAddress("glFreeObjectBufferATI");
    glArrayObjectATI             = (PFNGLARRAYOBJECTATIPROC)             wglGetProcAddress("glArrayObjectATI");
    glGetArrayObjectfvATI        = (PFNGLGETARRAYOBJECTFVATIPROC)        wglGetProcAddress("glGetArrayObjectfvATI");
    glGetArrayObjectivATI        = (PFNGLGETARRAYOBJECTIVATIPROC)        wglGetProcAddress("glGetArrayObjectivATI");
    glVariantArrayObjectATI      = (PFNGLVARIANTARRAYOBJECTATIPROC)      wglGetProcAddress("glVariantArrayObjectATI");
    glGetVariantArrayObjectfvATI = (PFNGLGETVARIANTARRAYOBJECTFVATIPROC) wglGetProcAddress("glGetVariantArrayObjectfvATI");
    glGetVariantArrayObjectivATI = (PFNGLGETVARIANTARRAYOBJECTIVATIPROC) wglGetProcAddress("glGetVariantArrayObjectivATI");

    // ATI map object buffer
    glMapObjectBufferATI   = (PFNGLMAPOBJECTBUFFERATIPROC)   wglGetProcAddress("glMapObjectBufferATI");
    glUnmapObjectBufferATI = (PFNGLUNMAPOBJECTBUFFERATIPROC) wglGetProcAddress("glUnmapObjectBufferATI");

    // ATI element array
    glElementPointerATI        = (PFNGLELEMENTPOINTERATIPROC)        wglGetProcAddress("glElementPointerATI");
    glDrawElementArrayATI      = (PFNGLDRAWELEMENTARRAYATIPROC)      wglGetProcAddress("glDrawElementArrayATI");
    glDrawRangeElementArrayATI = (PFNGLDRAWRANGEELEMENTARRAYATIPROC) wglGetProcAddress("glDrawRangeElementArrayATI");

    // ATI TruForm
    glPNTrianglesiATI = (PFNGLPNTRIANGLESIATIPROC) wglGetProcAddress("glPNTrianglesiATI");
    glPNTrianglesfATI = (PFNGLPNTRIANGLESFATIPROC) wglGetProcAddress("glPNTrianglesfATI");

    // NV vertex array range
    glFlushVertexArrayRangeNV = (PFNGLFLUSHVERTEXARRAYRANGENVPROC) wglGetProcAddress("glFlushVertexArrayRangeNV");
    glVertexArrayRangeNV      = (PFNGLVERTEXARRAYRANGENVPROC)      wglGetProcAddress("glVertexArrayRangeNV");

    // point parameters
    glPointParameterfARB  = (PFNGLPOINTPARAMETERFARBPROC)  wglGetProcAddress("glPointParameterfARB");
    glPointParameterfvARB = (PFNGLPOINTPARAMETERFVARBPROC) wglGetProcAddress("glPointParameterfvARB");

    // secondary color
    glSecondaryColor3bEXT      = (PFNGLSECONDARYCOLOR3BEXTPROC)      wglGetProcAddress("glSecondaryColor3bEXT");
    glSecondaryColor3bvEXT     = (PFNGLSECONDARYCOLOR3BVEXTPROC)     wglGetProcAddress("glSecondaryColor3bvEXT");
    glSecondaryColor3dEXT      = (PFNGLSECONDARYCOLOR3DEXTPROC)      wglGetProcAddress("glSecondaryColor3dEXT");
    glSecondaryColor3dvEXT     = (PFNGLSECONDARYCOLOR3DVEXTPROC)     wglGetProcAddress("glSecondaryColor3dvEXT");
    glSecondaryColor3fEXT      = (PFNGLSECONDARYCOLOR3FEXTPROC)      wglGetProcAddress("glSecondaryColor3fEXT");
    glSecondaryColor3fvEXT     = (PFNGLSECONDARYCOLOR3FVEXTPROC)     wglGetProcAddress("glSecondaryColor3fvEXT");
    glSecondaryColor3iEXT      = (PFNGLSECONDARYCOLOR3IEXTPROC)      wglGetProcAddress("glSecondaryColor3iEXT");
    glSecondaryColor3ivEXT     = (PFNGLSECONDARYCOLOR3IVEXTPROC)     wglGetProcAddress("glSecondaryColor3ivEXT");
    glSecondaryColor3sEXT      = (PFNGLSECONDARYCOLOR3SEXTPROC)      wglGetProcAddress("glSecondaryColor3sEXT");
    glSecondaryColor3svEXT     = (PFNGLSECONDARYCOLOR3SVEXTPROC)     wglGetProcAddress("glSecondaryColor3svEXT");
    glSecondaryColor3ubEXT     = (PFNGLSECONDARYCOLOR3UBEXTPROC)     wglGetProcAddress("glSecondaryColor3ubEXT");
    glSecondaryColor3ubvEXT    = (PFNGLSECONDARYCOLOR3UBVEXTPROC)    wglGetProcAddress("glSecondaryColor3ubvEXT");
    glSecondaryColor3uiEXT     = (PFNGLSECONDARYCOLOR3UIEXTPROC)     wglGetProcAddress("glSecondaryColor3uiEXT");
    glSecondaryColor3uivEXT    = (PFNGLSECONDARYCOLOR3UIVEXTPROC)    wglGetProcAddress("glSecondaryColor3uivEXT");
    glSecondaryColor3usEXT     = (PFNGLSECONDARYCOLOR3USEXTPROC)     wglGetProcAddress("glSecondaryColor3usEXT");
    glSecondaryColor3usvEXT    = (PFNGLSECONDARYCOLOR3USVEXTPROC)    wglGetProcAddress("glSecondaryColor3usvEXT");
    glSecondaryColorPointerEXT = (PFNGLSECONDARYCOLORPOINTEREXTPROC) wglGetProcAddress("glSecondaryColorPointerEXT");
    
    // blend func separate
    glBlendFuncSeparateEXT = (PFNGLBLENDFUNCSEPARATEEXTPROC) wglGetProcAddress("glBlendFuncSeparateEXT");

    // window pos
    glWindowPos2dARB  = (PFNGLWINDOWPOS2DARBPROC)  wglGetProcAddress("glWindowPos2dARB");
    glWindowPos2dvARB = (PFNGLWINDOWPOS2DVARBPROC) wglGetProcAddress("glWindowPos2dvARB");
    glWindowPos2fARB  = (PFNGLWINDOWPOS2FARBPROC)  wglGetProcAddress("glWindowPos2fARB");
    glWindowPos2fvARB = (PFNGLWINDOWPOS2FVARBPROC) wglGetProcAddress("glWindowPos2fvARB");
    glWindowPos2iARB  = (PFNGLWINDOWPOS2IARBPROC)  wglGetProcAddress("glWindowPos2iARB");
    glWindowPos2ivARB = (PFNGLWINDOWPOS2IVARBPROC) wglGetProcAddress("glWindowPos2ivARB");
    glWindowPos2sARB  = (PFNGLWINDOWPOS2SARBPROC)  wglGetProcAddress("glWindowPos2sARB");
    glWindowPos2svARB = (PFNGLWINDOWPOS2SVARBPROC) wglGetProcAddress("glWindowPos2svARB");
    glWindowPos3dARB  = (PFNGLWINDOWPOS3DARBPROC)  wglGetProcAddress("glWindowPos3dARB");
    glWindowPos3dvARB = (PFNGLWINDOWPOS3DVARBPROC) wglGetProcAddress("glWindowPos3dvARB");
    glWindowPos3fARB  = (PFNGLWINDOWPOS3FARBPROC)  wglGetProcAddress("glWindowPos3fARB");
    glWindowPos3fvARB = (PFNGLWINDOWPOS3FVARBPROC) wglGetProcAddress("glWindowPos3fvARB");
    glWindowPos3iARB  = (PFNGLWINDOWPOS3IARBPROC)  wglGetProcAddress("glWindowPos3iARB");
    glWindowPos3ivARB = (PFNGLWINDOWPOS3IVARBPROC) wglGetProcAddress("glWindowPos3ivARB");
    glWindowPos3sARB  = (PFNGLWINDOWPOS3SARBPROC)  wglGetProcAddress("glWindowPos3sARB");
    glWindowPos3svARB = (PFNGLWINDOWPOS3SVARBPROC) wglGetProcAddress("glWindowPos3svARB");

    // occlusion query
    glGenQueriesARB        = (PFNGLGENQUERIESARBPROC)        wglGetProcAddress("glGenQueriesARB");
    glDeleteQueriesARB     = (PFNGLDELETEQUERIESARBPROC)     wglGetProcAddress("glDeleteQueriesARB");
    glIsQueryARB           = (PFNGLISQUERYARBPROC)           wglGetProcAddress("glIsQueryARB");
    glBeginQueryARB        = (PFNGLBEGINQUERYARBPROC)        wglGetProcAddress("glBeginQueryARB");
    glEndQueryARB          = (PFNGLENDQUERYARBPROC)          wglGetProcAddress("glEndQueryARB");
    glGetQueryivARB        = (PFNGLGETQUERYIVARBPROC)        wglGetProcAddress("glGetQueryivARB");
    glGetQueryObjectivARB  = (PFNGLGETQUERYOBJECTIVARBPROC)  wglGetProcAddress("glGetQueryObjectivARB");
    glGetQueryObjectuivARB = (PFNGLGETQUERYOBJECTUIVARBPROC) wglGetProcAddress("glGetQueryObjectuivARB");

    // compiled vertex array
    glLockArraysEXT   = (PFNGLLOCKARRAYSEXTPROC)   wglGetProcAddress("glLockArraysEXT");
    glUnlockArraysEXT = (PFNGLUNLOCKARRAYSEXTPROC) wglGetProcAddress("glUnlockArraysEXT");

    // drawRangeElements
    glDrawRangeElementsEXT = (PFNGLDRAWRANGEELEMENTSEXTPROC) wglGetProcAddress("glDrawRangeElementsEXT");

    // vertex buffer object
    glGenBuffersARB           = (PFNGLGENBUFFERSARBPROC)           wglGetProcAddress("glGenBuffersARB");
    glBindBufferARB           = (PFNGLBINDBUFFERARBPROC)           wglGetProcAddress("glBindBufferARB");
    glBufferDataARB           = (PFNGLBUFFERDATAARBPROC)           wglGetProcAddress("glBufferDataARB");
    glBufferSubDataARB        = (PFNGLBUFFERSUBDATAARBPROC)        wglGetProcAddress("glBufferSubDataARB");
    glGetBufferSubDataARB     = (PFNGLGETBUFFERSUBDATAARBPROC)     wglGetProcAddress("glGetBufferSubDataARB");
    glDeleteBuffersARB        = (PFNGLDELETEBUFFERSARBPROC)        wglGetProcAddress("glDeleteBuffersARB");
    glIsBufferARB             = (PFNGLISBUFFERARBPROC)             wglGetProcAddress("glIsBufferARB");
    glMapBufferARB            = (PFNGLMAPBUFFERARBPROC)            wglGetProcAddress("glMapBufferARB");
    glUnmapBufferARB          = (PFNGLUNMAPBUFFERARBPROC)          wglGetProcAddress("glUnmapBufferARB");
    glGetBufferParameterivARB = (PFNGLGETBUFFERPARAMETERIVARBPROC) wglGetProcAddress("glGetBufferParameterivARB");
    glGetBufferPointervARB    = (PFNGLGETBUFFERPOINTERVARBPROC)    wglGetProcAddress("glGetBufferPointervARB");

    // shader objects
    glDeleteObjectARB         = (PFNGLDELETEOBJECTARBPROC)         wglGetProcAddress("glDeleteObjectARB");
    glGetHandleARB            = (PFNGLGETHANDLEARBPROC)            wglGetProcAddress("glGetHandleARB");
    glDetachObjectARB         = (PFNGLDETACHOBJECTARBPROC)         wglGetProcAddress("glDetachObjectARB");
    glCreateShaderObjectARB   = (PFNGLCREATESHADEROBJECTARBPROC)   wglGetProcAddress("glCreateShaderObjectARB");
    glShaderSourceARB         = (PFNGLSHADERSOURCEARBPROC)         wglGetProcAddress("glShaderSourceARB");
    glCompileShaderARB        = (PFNGLCOMPILESHADERARBPROC)        wglGetProcAddress("glCompileShaderARB");
    glCreateProgramObjectARB  = (PFNGLCREATEPROGRAMOBJECTARBPROC)  wglGetProcAddress("glCreateProgramObjectARB");
    glAttachObjectARB         = (PFNGLATTACHOBJECTARBPROC)         wglGetProcAddress("glAttachObjectARB");
    glLinkProgramARB          = (PFNGLLINKPROGRAMARBPROC)          wglGetProcAddress("glLinkProgramARB");
    glUseProgramObjectARB     = (PFNGLUSEPROGRAMOBJECTARBPROC)     wglGetProcAddress("glUseProgramObjectARB");
    glValidateProgramARB      = (PFNGLVALIDATEPROGRAMARBPROC)      wglGetProcAddress("glValidateProgramARB");
    glUniform1fARB            = (PFNGLUNIFORM1FARBPROC)            wglGetProcAddress("glUniform1fARB");
    glUniform2fARB            = (PFNGLUNIFORM2FARBPROC)            wglGetProcAddress("glUniform2fARB");
    glUniform3fARB            = (PFNGLUNIFORM3FARBPROC)            wglGetProcAddress("glUniform3fARB");
    glUniform4fARB            = (PFNGLUNIFORM4FARBPROC)            wglGetProcAddress("glUniform4fARB");
    glUniform1iARB            = (PFNGLUNIFORM1IARBPROC)            wglGetProcAddress("glUniform1iARB");
    glUniform2iARB            = (PFNGLUNIFORM2IARBPROC)            wglGetProcAddress("glUniform2iARB");
    glUniform3iARB            = (PFNGLUNIFORM3IARBPROC)            wglGetProcAddress("glUniform3iARB");
    glUniform4iARB            = (PFNGLUNIFORM4IARBPROC)            wglGetProcAddress("glUniform4iARB");
    glUniform1fvARB           = (PFNGLUNIFORM1FVARBPROC)           wglGetProcAddress("glUniform1fvARB");
    glUniform2fvARB           = (PFNGLUNIFORM2FVARBPROC)           wglGetProcAddress("glUniform2fvARB");
    glUniform3fvARB           = (PFNGLUNIFORM3FVARBPROC)           wglGetProcAddress("glUniform3fvARB");
    glUniform4fvARB           = (PFNGLUNIFORM4FVARBPROC)           wglGetProcAddress("glUniform4fvARB");
    glUniform1ivARB           = (PFNGLUNIFORM1IVARBPROC)           wglGetProcAddress("glUniform1ivARB");
    glUniform2ivARB           = (PFNGLUNIFORM2IVARBPROC)           wglGetProcAddress("glUniform2ivARB");
    glUniform3ivARB           = (PFNGLUNIFORM3IVARBPROC)           wglGetProcAddress("glUniform3ivARB");
    glUniform4ivARB           = (PFNGLUNIFORM4IVARBPROC)           wglGetProcAddress("glUniform4ivARB");
    glUniformMatrix2fvARB     = (PFNGLUNIFORMMATRIX2FVARBPROC)     wglGetProcAddress("glUniformMatrix2fvARB");
    glUniformMatrix3fvARB     = (PFNGLUNIFORMMATRIX3FVARBPROC)     wglGetProcAddress("glUniformMatrix3fvARB");
    glUniformMatrix4fvARB     = (PFNGLUNIFORMMATRIX4FVARBPROC)     wglGetProcAddress("glUniformMatrix4fvARB");
    glGetObjectParameterfvARB = (PFNGLGETOBJECTPARAMETERFVARBPROC) wglGetProcAddress("glGetObjectParameterfvARB");
    glGetObjectParameterivARB = (PFNGLGETOBJECTPARAMETERIVARBPROC) wglGetProcAddress("glGetObjectParameterivARB");
    glGetInfoLogARB           = (PFNGLGETINFOLOGARBPROC)           wglGetProcAddress("glGetInfoLogARB");
    glGetAttachedObjectsARB   = (PFNGLGETATTACHEDOBJECTSARBPROC)   wglGetProcAddress("glGetAttachedObjectsARB");
    glGetUniformLocationARB   = (PFNGLGETUNIFORMLOCATIONARBPROC)   wglGetProcAddress("glGetUniformLocationARB");
    glGetActiveUniformARB     = (PFNGLGETACTIVEUNIFORMARBPROC)     wglGetProcAddress("glGetActiveUniformARB");
    glGetUniformfvARB         = (PFNGLGETUNIFORMFVARBPROC)         wglGetProcAddress("glGetUniformfvARB");
    glGetUniformivARB         = (PFNGLGETUNIFORMIVARBPROC)         wglGetProcAddress("glGetUniformivARB");
    glGetShaderSourceARB      = (PFNGLGETSHADERSOURCEARBPROC)      wglGetProcAddress("glGetShaderSourceARB");

    // vertex shader
    glBindAttribLocationARB = (PFNGLBINDATTRIBLOCATIONARBPROC) wglGetProcAddress("glBindAttribLocationARB");
    glGetActiveAttribARB    = (PFNGLGETACTIVEATTRIBARBPROC)    wglGetProcAddress("glGetActiveAttribARB");
    glGetAttribLocationARB  = (PFNGLGETATTRIBLOCATIONARBPROC)  wglGetProcAddress("glGetAttribLocationARB");

    // draw buffers
    glDrawBuffersARB = (PFNGLDRAWBUFFERSARBPROC) wglGetProcAddress("glDrawBuffersARB");

    // framebuffer object
    glIsRenderbuffer                      = (PFNGLISRENDERBUFFERPROC)                      wglGetProcAddress("glIsRenderbuffer");
    glBindRenderbuffer                    = (PFNGLBINDRENDERBUFFERPROC)                    wglGetProcAddress("glBindRenderbuffer");
    glDeleteRenderbuffers                 = (PFNGLDELETERENDERBUFFERSPROC)                 wglGetProcAddress("glDeleteRenderbuffers");
    glGenRenderbuffers                    = (PFNGLGENRENDERBUFFERSPROC)                    wglGetProcAddress("glGenRenderbuffers");
    glRenderbufferStorage                 = (PFNGLRENDERBUFFERSTORAGEPROC)                 wglGetProcAddress("glRenderbufferStorage");
    glGetRenderbufferParameteriv          = (PFNGLGETRENDERBUFFERPARAMETERIVPROC)          wglGetProcAddress("glGetRenderbufferParameteriv");
    glIsFramebuffer                       = (PFNGLISFRAMEBUFFERPROC)                       wglGetProcAddress("glIsFramebuffer");
    glBindFramebuffer                     = (PFNGLBINDFRAMEBUFFERPROC)                     wglGetProcAddress("glBindFramebuffer");
    glDeleteFramebuffers                  = (PFNGLDELETEFRAMEBUFFERSPROC)                  wglGetProcAddress("glDeleteFramebuffers");
    glGenFramebuffers                     = (PFNGLGENFRAMEBUFFERSPROC)                     wglGetProcAddress("glGenFramebuffers");
    glCheckFramebufferStatus              = (PFNGLCHECKFRAMEBUFFERSTATUSPROC)              wglGetProcAddress("glCheckFramebufferStatus");
    glFramebufferTexture1D                = (PFNGLFRAMEBUFFERTEXTURE1DPROC)                wglGetProcAddress("glFramebufferTexture1D");
    glFramebufferTexture2D                = (PFNGLFRAMEBUFFERTEXTURE2DPROC)                wglGetProcAddress("glFramebufferTexture2D");
    glFramebufferTexture3D                = (PFNGLFRAMEBUFFERTEXTURE3DPROC)                wglGetProcAddress("glFramebufferTexture3D");
    glFramebufferRenderbuffer             = (PFNGLFRAMEBUFFERRENDERBUFFERPROC)             wglGetProcAddress("glFramebufferRenderbuffer");
    glGetFramebufferAttachmentParameteriv = (PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVPROC) wglGetProcAddress("glGetFramebufferAttachmentParameteriv");
    glGenerateMipmap                      = (PFNGLGENERATEMIPMAPPROC)                      wglGetProcAddress("glGenerateMipmap");
    glBlitFramebuffer                     = (PFNGLBLITFRAMEBUFFERPROC)                     wglGetProcAddress("glBlitFramebuffer");
    glRenderbufferStorageMultisample      = (PFNGLRENDERBUFFERSTORAGEMULTISAMPLEPROC)      wglGetProcAddress("glRenderbufferStorageMultisample");
    glFramebufferTextureLayer             = (PFNGLFRAMEBUFFERTEXTURELAYERPROC)             wglGetProcAddress("glFramebufferTextureLayer");

    // vertex array object
    glBindVertexArray    = (PFNGLBINDVERTEXARRAYPROC)    wglGetProcAddress("glBindVertexArray");
    glDeleteVertexArrays = (PFNGLDELETEVERTEXARRAYSPROC) wglGetProcAddress("glDeleteVertexArrays");
    glGenVertexArrays    = (PFNGLGENVERTEXARRAYSPROC)    wglGetProcAddress("glGenVertexArrays");
    glIsVertexArray      = (PFNGLISVERTEXARRAYPROC)      wglGetProcAddress("glIsVertexArray");

    // ATI separate stencil
    glStencilOpSeparateATI   = (PFNGLSTENCILOPSEPARATEATIPROC)   wglGetProcAddress("glStencilOpSeparateATI");
    glStencilFuncSeparateATI = (PFNGLSTENCILFUNCSEPARATEATIPROC) wglGetProcAddress("glStencilFuncSeparateATI");

    // Two side stencil
    glActiveStencilFaceEXT = (PFNGLACTIVESTENCILFACEEXTPROC) wglGetProcAddress("glActiveStencilFaceEXT");

    // Conditional rendering
    glBeginConditionalRenderNV = (PFNGLBEGINCONDITIONALRENDERNVPROC) wglGetProcAddress("glBeginConditionalRenderNV");
    glEndConditionalRenderNV   = (PFNGLENDCONDITIONALRENDERNVPROC)   wglGetProcAddress("glEndConditionalRenderNV");

    // Floating point internal formats
    glClampColorARB = (PFNGLCLAMPCOLORARBPROC) wglGetProcAddress("glClampColorARB");

    // NV depth buffer float
    glDepthRangedNV  = (PFNGLDEPTHRANGEDNVPROC)  wglGetProcAddress("glDepthRangedNV");
    glClearDepthdNV  = (PFNGLCLEARDEPTHDNVPROC)  wglGetProcAddress("glClearDepthdNV");
    glDepthBoundsdNV = (PFNGLDEPTHBOUNDSDNVPROC) wglGetProcAddress("glDepthBoundsdNV");
    
    // NV half-floats
    glVertex2hNV          = (PFNGLVERTEX2HNVPROC)          wglGetProcAddress("glVertex2hNV");
    glVertex2hvNV         = (PFNGLVERTEX2HVNVPROC)         wglGetProcAddress("glVertex2hvNV");
    glVertex3hNV          = (PFNGLVERTEX3HNVPROC)          wglGetProcAddress("glVertex3hNV");
    glVertex3hvNV         = (PFNGLVERTEX3HVNVPROC)         wglGetProcAddress("glVertex3hvNV");
    glVertex4hNV          = (PFNGLVERTEX4HNVPROC)          wglGetProcAddress("glVertex4hNV");
    glVertex4hvNV         = (PFNGLVERTEX4HVNVPROC)         wglGetProcAddress("glVertex4hvNV");
    glNormal3hNV          = (PFNGLNORMAL3HNVPROC)          wglGetProcAddress("glNormal3hNV");
    glNormal3hvNV         = (PFNGLNORMAL3HVNVPROC)         wglGetProcAddress("glNormal3hvNV");
    glColor3hNV           = (PFNGLCOLOR3HNVPROC)           wglGetProcAddress("glColor3hNV");
    glColor3hvNV          = (PFNGLCOLOR3HVNVPROC)          wglGetProcAddress("glColor3hvNV");
    glColor4hNV           = (PFNGLCOLOR4HNVPROC)           wglGetProcAddress("glColor4hNV");
    glColor4hvNV          = (PFNGLCOLOR4HVNVPROC)          wglGetProcAddress("glColor4hvNV");
    glTexCoord1hNV        = (PFNGLTEXCOORD1HNVPROC)        wglGetProcAddress("glTexCoord1hNV");
    glTexCoord1hvNV       = (PFNGLTEXCOORD1HVNVPROC)       wglGetProcAddress("glTexCoord1hvNV");
    glTexCoord2hNV        = (PFNGLTEXCOORD2HNVPROC)        wglGetProcAddress("glTexCoord2hNV");
    glTexCoord2hvNV       = (PFNGLTEXCOORD2HVNVPROC)       wglGetProcAddress("glTexCoord2hvNV");
    glTexCoord3hNV        = (PFNGLTEXCOORD3HNVPROC)        wglGetProcAddress("glTexCoord3hNV");
    glTexCoord3hvNV       = (PFNGLTEXCOORD3HVNVPROC)       wglGetProcAddress("glTexCoord3hvNV");
    glTexCoord4hNV        = (PFNGLTEXCOORD4HNVPROC)        wglGetProcAddress("glTexCoord4hNV");
    glTexCoord4hvNV       = (PFNGLTEXCOORD4HVNVPROC)       wglGetProcAddress("glTexCoord4hvNV");
    glMultiTexCoord1hNV   = (PFNGLMULTITEXCOORD1HNVPROC)   wglGetProcAddress("glMultiTexCoord1hNV");
    glMultiTexCoord1hvNV  = (PFNGLMULTITEXCOORD1HVNVPROC)  wglGetProcAddress("glMultiTexCoord1hvNV");
    glMultiTexCoord2hNV   = (PFNGLMULTITEXCOORD2HNVPROC)   wglGetProcAddress("glMultiTexCoord2hNV");
    glMultiTexCoord2hvNV  = (PFNGLMULTITEXCOORD2HVNVPROC)  wglGetProcAddress("glMultiTexCoord2hvNV");
    glMultiTexCoord3hNV   = (PFNGLMULTITEXCOORD3HNVPROC)   wglGetProcAddress("glMultiTexCoord3hNV");
    glMultiTexCoord3hvNV  = (PFNGLMULTITEXCOORD3HVNVPROC)  wglGetProcAddress("glMultiTexCoord3hvNV");
    glMultiTexCoord4hNV   = (PFNGLMULTITEXCOORD4HNVPROC)   wglGetProcAddress("glMultiTexCoord4hNV");
    glMultiTexCoord4hvNV  = (PFNGLMULTITEXCOORD4HVNVPROC)  wglGetProcAddress("glMultiTexCoord4hvNV");
    glFogCoordhNV         = (PFNGLFOGCOORDHNVPROC)         wglGetProcAddress("glFogCoordhNV");
    glFogCoordhvNV        = (PFNGLFOGCOORDHVNVPROC)        wglGetProcAddress("glFogCoordhvNV");
    glSecondaryColor3hNV  = (PFNGLSECONDARYCOLOR3HNVPROC)  wglGetProcAddress("glSecondaryColor3hNV");
    glSecondaryColor3hvNV = (PFNGLSECONDARYCOLOR3HVNVPROC) wglGetProcAddress("glSecondaryColor3hvNV");
    glVertexWeighthNV     = (PFNGLVERTEXWEIGHTHNVPROC)     wglGetProcAddress("glVertexWeighthNV");
    glVertexWeighthvNV    = (PFNGLVERTEXWEIGHTHVNVPROC)    wglGetProcAddress("glVertexWeighthvNV");
    glVertexAttrib1hNV    = (PFNGLVERTEXATTRIB1HNVPROC)    wglGetProcAddress("glVertexAttrib1hNV");
    glVertexAttrib1hvNV   = (PFNGLVERTEXATTRIB1HVNVPROC)   wglGetProcAddress("glVertexAttrib1hvNV");
    glVertexAttrib2hNV    = (PFNGLVERTEXATTRIB2HNVPROC)    wglGetProcAddress("glVertexAttrib2hNV");
    glVertexAttrib2hvNV   = (PFNGLVERTEXATTRIB2HVNVPROC)   wglGetProcAddress("glVertexAttrib2hvNV");
    glVertexAttrib3hNV    = (PFNGLVERTEXATTRIB3HNVPROC)    wglGetProcAddress("glVertexAttrib3hNV");
    glVertexAttrib3hvNV   = (PFNGLVERTEXATTRIB3HVNVPROC)   wglGetProcAddress("glVertexAttrib3hvNV");
    glVertexAttrib4hNV    = (PFNGLVERTEXATTRIB4HNVPROC)    wglGetProcAddress("glVertexAttrib4hNV");
    glVertexAttrib4hvNV   = (PFNGLVERTEXATTRIB4HVNVPROC)   wglGetProcAddress("glVertexAttrib4hvNV");
    glVertexAttribs1hvNV  = (PFNGLVERTEXATTRIBS1HVNVPROC)  wglGetProcAddress("glVertexAttribs1hvNV");
    glVertexAttribs2hvNV  = (PFNGLVERTEXATTRIBS2HVNVPROC)  wglGetProcAddress("glVertexAttribs2hvNV");
    glVertexAttribs3hvNV  = (PFNGLVERTEXATTRIBS3HVNVPROC)  wglGetProcAddress("glVertexAttribs3hvNV");
    glVertexAttribs4hvNV  = (PFNGLVERTEXATTRIBS4HVNVPROC)  wglGetProcAddress("glVertexAttribs4hvNV");
    
    // Integer texture parameters
    glTexParameterIivEXT     = (PFNGLTEXPARAMETERIIVEXTPROC)      wglGetProcAddress("glTexParameterIivEXT");
    glTexParameterIuivEXT    = (PFNGLTEXPARAMETERIUIVEXTPROC)     wglGetProcAddress("glTexParameterIuivEXT");
    glGetTexParameterIivEXT  = (PFNGLGETTEXPARAMETERIIVEXTPROC)   wglGetProcAddress("glGetTexParameterIivEXT"); 
    glGetTexParameterIuivEXT = (PFNGLGETTEXPARAMETERIUIVEXTPROC)  wglGetProcAddress("glGetTexParameterIuivEXT");
    glClearColorIiEXT        = (PFNGLCLEARCOLORIIEXTPROC)         wglGetProcAddress("glClearColorIiEXT");
    glClearColorIuiEXT       = (PFNGLCLEARCOLORIUIEXTPROC)        wglGetProcAddress("glClearColorIuiEXT");
    
    // Draw buffers 2
    glColorMaskIndexedEXT   = (PFNGLCOLORMASKINDEXEDEXTPROC)    wglGetProcAddress("glColorMaskIndexedEXT");
    glGetBooleanIndexedvEXT = (PFNGLGETBOOLEANINDEXEDVEXTPROC)  wglGetProcAddress("glGetBooleanIndexedvEXT");
    glGetIntegerIndexedvEXT = (PFNGLGETINTEGERINDEXEDVEXTPROC)  wglGetProcAddress("glGetIntegerIndexedvEXT");
    glEnableIndexedEXT      = (PFNGLENABLEINDEXEDEXTPROC)       wglGetProcAddress("glEnableIndexedEXT");
    glDisableIndexedEXT     = (PFNGLDISABLEINDEXEDEXTPROC)      wglGetProcAddress("glDisableIndexedEXT");
    glIsEnabledIndexedEXT   = (PFNGLISENABLEDINDEXEDEXTPROC)    wglGetProcAddress("glIsEnabledIndexedEXT");
       
    // Transform feedback EXT
    glBeginTransformFeedbackEXT      = (PFNGLBEGINTRANSFORMFEEDBACKEXTPROC)       wglGetProcAddress("glBeginTransformFeedbackEXT");
    if ( glBeginTransformFeedbackEXT )
    {
        glEndTransformFeedbackEXT        = (PFNGLENDTRANSFORMFEEDBACKEXTPROC)         wglGetProcAddress("glEndTransformFeedbackEXT");
        glBindBufferRangeEXT             = (PFNGLBINDBUFFERRANGEEXTPROC)              wglGetProcAddress("glBindBufferRangeEXT");
        glBindBufferOffsetEXT            = (PFNGLBINDBUFFEROFFSETEXTPROC)             wglGetProcAddress("glBindBufferOffsetEXT");
        glBindBufferBaseEXT              = (PFNGLBINDBUFFERBASEEXTPROC)               wglGetProcAddress("glBindBufferBaseEXT");
        glTransformFeedbackVaryingsEXT   = (PFNGLTRANSFORMFEEDBACKVARYINGSEXTPROC)    wglGetProcAddress("glTransformFeedbackVaryingsEXT");
        glGetTransformFeedbackVaryingEXT = (PFNGLGETTRANSFORMFEEDBACKVARYINGEXTPROC)  wglGetProcAddress("glGetTransformFeedbackVaryingEXT");
    }
    else
    {
        glBeginTransformFeedbackEXT      = (PFNGLBEGINTRANSFORMFEEDBACKEXTPROC)       wglGetProcAddress("glBeginTransformFeedback");
        glEndTransformFeedbackEXT        = (PFNGLENDTRANSFORMFEEDBACKEXTPROC)         wglGetProcAddress("glEndTransformFeedback");
        glBindBufferRangeEXT             = (PFNGLBINDBUFFERRANGEEXTPROC)              wglGetProcAddress("glBindBufferRange");
        glBindBufferOffsetEXT            = (PFNGLBINDBUFFEROFFSETEXTPROC)             wglGetProcAddress("glBindBufferOffset");
        glBindBufferBaseEXT              = (PFNGLBINDBUFFERBASEEXTPROC)               wglGetProcAddress("glBindBufferBase");
        glTransformFeedbackVaryingsEXT   = (PFNGLTRANSFORMFEEDBACKVARYINGSEXTPROC)    wglGetProcAddress("glTransformFeedbackVaryings");
        glGetTransformFeedbackVaryingEXT = (PFNGLGETTRANSFORMFEEDBACKVARYINGEXTPROC)  wglGetProcAddress("glGetTransformFeedbackVarying");
    }
    
    // Uniform buffer object
    glDrawArraysInstanced    = (PFNGLDRAWARRAYSINSTANCEDPROC)     wglGetProcAddress("glDrawArraysInstanced");
    glDrawElementsInstanced  = (PFNGLDRAWELEMENTSINSTANCEDPROC)   wglGetProcAddress("glDrawElementsInstanced");
    glTexBuffer              = (PFNGLTEXBUFFERPROC)               wglGetProcAddress("glTexBuffer");
    glPrimitiveRestartIndex  = (PFNGLPRIMITIVERESTARTINDEXPROC)   wglGetProcAddress("glPrimitiveRestartIndex");
    
    // Instanced draw
    glDrawArraysInstancedARB   = (PFNGLDRAWARRAYSINSTANCEDARBPROC)   wglGetProcAddress("glDrawArraysInstancedARB");
    glDrawElementsInstancedARB = (PFNGLDRAWELEMENTSINSTANCEDARBPROC) wglGetProcAddress("glDrawElementsInstancedARB");
    
    // Buffer copy
    glCopyBufferSubData = (PFNGLCOPYBUFFERSUBDATAPROC) wglGetProcAddress("glCopyBufferSubData");
    
    // Primitive restart
    glPrimitiveRestartNV      = (PFNGLPRIMITIVERESTARTNVPROC)      wglGetProcAddress("glPrimitiveRestartNV");
    glPrimitiveRestartIndexNV = (PFNGLPRIMITIVERESTARTINDEXNVPROC) wglGetProcAddress("glPrimitiveRestartIndexNV");
    
    // Texture buffer object
    glTexBufferARB = (PFNGLTEXBUFFERARBPROC) wglGetProcAddress("glTexBufferARB");

    // API robustness
    glGetGraphicsResetStatusARB = (PFNGLGETGRAPHICSRESETSTATUSARBPROC)  wglGetProcAddress("glGetGraphicsResetStatusARB");
    glGetnMapdvARB              = (PFNGLGETNMAPDVARBPROC)               wglGetProcAddress("glGetnMapdvARB");
    glGetnMapfvARB              = (PFNGLGETNMAPFVARBPROC)               wglGetProcAddress("glGetnMapfvARB");
    glGetnMapivARB              = (PFNGLGETNMAPIVARBPROC)               wglGetProcAddress("glGetnMapivARB");
    glGetnPixelMapfvARB         = (PFNGLGETNPIXELMAPFVARBPROC)          wglGetProcAddress("glGetnPixelMapfvARB");
    glGetnPixelMapuivARB        = (PFNGLGETNPIXELMAPUIVARBPROC)         wglGetProcAddress("glGetnPixelMapuivARB");
    glGetnPixelMapusvARB        = (PFNGLGETNPIXELMAPUSVARBPROC)         wglGetProcAddress("glGetnPixelMapusvARB");
    glGetnPolygonStippleARB     = (PFNGLGETNPOLYGONSTIPPLEARBPROC)      wglGetProcAddress("glGetnPolygonStippleARB");
    glGetnColorTableARB         = (PFNGLGETNCOLORTABLEARBPROC)          wglGetProcAddress("glGetnColorTableARB");
    glGetnConvolutionFilterARB  = (PFNGLGETNCONVOLUTIONFILTERARBPROC)   wglGetProcAddress("glGetnConvolutionFilterARB");
    glGetnSeparableFilterARB    = (PFNGLGETNSEPARABLEFILTERARBPROC)     wglGetProcAddress("glGetnSeparableFilterARB");
    glGetnHistogramARB          = (PFNGLGETNHISTOGRAMARBPROC)           wglGetProcAddress("glGetnHistogramARB");
    glGetnMinmaxARB             = (PFNGLGETNMINMAXARBPROC)              wglGetProcAddress("glGetnMinmaxARB");
    glGetnTexImageARB           = (PFNGLGETNTEXIMAGEARBPROC)            wglGetProcAddress("glGetnTexImageARB");
    glReadnPixelsARB            = (PFNGLREADNPIXELSARBPROC)             wglGetProcAddress("glReadnPixelsARB");
    glGetnCompressedTexImageARB = (PFNGLGETNCOMPRESSEDTEXIMAGEARBPROC)  wglGetProcAddress("glGetnCompressedTexImageARB");
    glGetnUniformfvARB          = (PFNGLGETNUNIFORMFVARBPROC)           wglGetProcAddress("glGetnUniformfvARB");
    glGetnUniformivARB          = (PFNGLGETNUNIFORMIVARBPROC)           wglGetProcAddress("glGetnUniformivARB");
    glGetnUniformuivARB         = (PFNGLGETNUNIFORMUIVARBPROC)          wglGetProcAddress("glGetnUniformuivARB");
    glGetnUniformdvARB          = (PFNGLGETNUNIFORMDVARBPROC)           wglGetProcAddress("glGetnUniformdvARB");
    
    // Draw elements base vertex
    glDrawElementsBaseVertex          = (PFNGLDRAWELEMENTSBASEVERTEXPROC)           wglGetProcAddress("glDrawElementsBaseVertex");
    glDrawRangeElementsBaseVertex     = (PFNGLDRAWRANGEELEMENTSBASEVERTEXPROC)      wglGetProcAddress("glDrawRangeElementsBaseVertex");
    glDrawElementsInstancedBaseVertex = (PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXPROC)  wglGetProcAddress("glDrawElementsInstancedBaseVertex");
    glMultiDrawElementsBaseVertex     = (PFNGLMULTIDRAWELEMENTSBASEVERTEXPROC)      wglGetProcAddress("glMultiDrawElementsBaseVertex");
    
    // Provoking vertex
    glProvokingVertex = (PFNGLPROVOKINGVERTEXPROC) wglGetProcAddress("glProvokingVertex");
    
    // Texture multisample
    glTexImage2DMultisample = (PFNGLTEXIMAGE2DMULTISAMPLEPROC) wglGetProcAddress("glTexImage2DMultisample");
    glTexImage3DMultisample = (PFNGLTEXIMAGE3DMULTISAMPLEPROC) wglGetProcAddress("glTexImage3DMultisample");
    glGetMultisamplefv      = (PFNGLGETMULTISAMPLEFVPROC)      wglGetProcAddress("glGetMultisamplefv");
    glSampleMaski           = (PFNGLSAMPLEMASKIPROC)           wglGetProcAddress("glSampleMaski");
    
    // Sync
    glFenceSync      = (PFNGLFENCESYNCPROC)      wglGetProcAddress("glFenceSync");
    glIsSync         = (PFNGLISSYNCPROC)         wglGetProcAddress("glIsSync");
    glDeleteSync     = (PFNGLDELETESYNCPROC)     wglGetProcAddress("glDeleteSync");
    glClientWaitSync = (PFNGLCLIENTWAITSYNCPROC) wglGetProcAddress("glClientWaitSync");
    glWaitSync       = (PFNGLWAITSYNCPROC)       wglGetProcAddress("glWaitSync");
    glGetInteger64v  = (PFNGLGETINTEGER64VPROC)  wglGetProcAddress("glGetInteger64v");
    glGetSynciv      = (PFNGLGETSYNCIVPROC)      wglGetProcAddress("glGetSynciv");
    
    // Geometry shader
    glProgramParameteriARB       = (PFNGLPROGRAMPARAMETERIARBPROC)       wglGetProcAddress("glProgramParameteriARB");
    glFramebufferTextureARB      = (PFNGLFRAMEBUFFERTEXTUREARBPROC)      wglGetProcAddress("glFramebufferTextureARB");
    glFramebufferTextureLayerARB = (PFNGLFRAMEBUFFERTEXTURELAYERARBPROC) wglGetProcAddress("glFramebufferTextureLayerARB");
    glFramebufferTextureFaceARB  = (PFNGLFRAMEBUFFERTEXTUREFACEARBPROC)  wglGetProcAddress("glFramebufferTextureFaceARB");

    // Extended blend source
    glBindFragDataLocationIndexed = (PFNGLBINDFRAGDATALOCATIONINDEXEDPROC) wglGetProcAddress("glBindFragDataLocationIndexed");
    glGetFragDataIndex            = (PFNGLGETFRAGDATAINDEXPROC)            wglGetProcAddress("glGetFragDataIndex");

    // Sampler objects
    glGenSamplers             = (PFNGLGENSAMPLERSPROC)              wglGetProcAddress("glGenSamplers");
    glDeleteSamplers          = (PFNGLDELETESAMPLERSPROC)           wglGetProcAddress("glDeleteSamplers");
    glIsSampler               = (PFNGLISSAMPLERPROC)                wglGetProcAddress("glIsSampler");
    glBindSampler             = (PFNGLBINDSAMPLERPROC)              wglGetProcAddress("glBindSampler");
    glSamplerParameteri       = (PFNGLSAMPLERPARAMETERIPROC)        wglGetProcAddress("glSamplerParameteri");
    glSamplerParameteriv      = (PFNGLSAMPLERPARAMETERIVPROC)       wglGetProcAddress("glSamplerParameteriv");
    glSamplerParameterf       = (PFNGLSAMPLERPARAMETERFPROC)        wglGetProcAddress("glSamplerParameterf");
    glSamplerParameterfv      = (PFNGLSAMPLERPARAMETERFVPROC)       wglGetProcAddress("glSamplerParameterfv");
    glSamplerParameterIiv     = (PFNGLSAMPLERPARAMETERIIVPROC)      wglGetProcAddress("glSamplerParameterIiv");
    glSamplerParameterIuiv    = (PFNGLSAMPLERPARAMETERIUIVPROC)     wglGetProcAddress("glSamplerParameterIuiv");
    glGetSamplerParameteriv   = (PFNGLGETSAMPLERPARAMETERIVPROC)    wglGetProcAddress("glGetSamplerParameteriv");
    glGetSamplerParameterIiv  = (PFNGLGETSAMPLERPARAMETERIIVPROC)   wglGetProcAddress("glGetSamplerParameterIiv");
    glGetSamplerParameterfv   = (PFNGLGETSAMPLERPARAMETERFVPROC)    wglGetProcAddress("glGetSamplerParameterfv");
    glGetSamplerParameterIuiv = (PFNGLGETSAMPLERPARAMETERIUIVPROC)  wglGetProcAddress("glGetSamplerParameterIuiv");

    // Timer query
    glQueryCounter        = (PFNGLQUERYCOUNTERPROC)        wglGetProcAddress("glQueryCounter");
    glGetQueryObjecti64v  = (PFNGLGETQUERYOBJECTI64VPROC)  wglGetProcAddress("glGetQueryObjecti64v"); 
    glGetQueryObjectui64v = (PFNGLGETQUERYOBJECTUI64VPROC) wglGetProcAddress("glGetQueryObjectui64v");

    // Instanced arrays
    glVertexAttribDivisorARB = (PFNGLVERTEXATTRIBDIVISORARBPROC) wglGetProcAddress("glVertexAttribDivisorARB");

    // Vertex type 2.10.10.10 rev
    glVertexP2ui          = (PFNGLVERTEXP2UIPROC)          wglGetProcAddress("glVertexP2ui");
    glVertexP2uiv         = (PFNGLVERTEXP2UIVPROC)         wglGetProcAddress("glVertexP2uiv");
    glVertexP3ui          = (PFNGLVERTEXP3UIPROC)          wglGetProcAddress("glVertexP3ui");
    glVertexP3uiv         = (PFNGLVERTEXP3UIVPROC)         wglGetProcAddress("glVertexP3uiv");
    glVertexP4ui          = (PFNGLVERTEXP4UIPROC)          wglGetProcAddress("glVertexP4ui");
    glVertexP4uiv         = (PFNGLVERTEXP4UIVPROC)         wglGetProcAddress("glVertexP4uiv");
    glTexCoordP1ui        = (PFNGLTEXCOORDP1UIPROC)        wglGetProcAddress("glTexCoordP1ui");
    glTexCoordP1uiv       = (PFNGLTEXCOORDP1UIVPROC)       wglGetProcAddress("glTexCoordP1uiv");
    glTexCoordP2ui        = (PFNGLTEXCOORDP2UIPROC)        wglGetProcAddress("glTexCoordP2ui");
    glTexCoordP2uiv       = (PFNGLTEXCOORDP2UIVPROC)       wglGetProcAddress("glTexCoordP2uiv");
    glTexCoordP3ui        = (PFNGLTEXCOORDP3UIPROC)        wglGetProcAddress("glTexCoordP3ui");
    glTexCoordP3uiv       = (PFNGLTEXCOORDP3UIVPROC)       wglGetProcAddress("glTexCoordP3uiv");
    glTexCoordP4ui        = (PFNGLTEXCOORDP4UIPROC)        wglGetProcAddress("glTexCoordP4ui");
    glTexCoordP4uiv       = (PFNGLTEXCOORDP4UIVPROC)       wglGetProcAddress("glTexCoordP4uiv");
    glMultiTexCoordP1ui   = (PFNGLMULTITEXCOORDP1UIPROC)   wglGetProcAddress("glMultiTexCoordP1ui");
    glMultiTexCoordP1uiv  = (PFNGLMULTITEXCOORDP1UIVPROC)  wglGetProcAddress("glMultiTexCoordP1uiv");
    glMultiTexCoordP2ui   = (PFNGLMULTITEXCOORDP2UIPROC)   wglGetProcAddress("glMultiTexCoordP2ui");
    glMultiTexCoordP2uiv  = (PFNGLMULTITEXCOORDP2UIVPROC)  wglGetProcAddress("glMultiTexCoordP2uiv");
    glMultiTexCoordP3ui   = (PFNGLMULTITEXCOORDP3UIPROC)   wglGetProcAddress("glMultiTexCoordP3ui");
    glMultiTexCoordP3uiv  = (PFNGLMULTITEXCOORDP3UIVPROC)  wglGetProcAddress("glMultiTexCoordP3uiv");
    glMultiTexCoordP4ui   = (PFNGLMULTITEXCOORDP4UIPROC)   wglGetProcAddress("glMultiTexCoordP4ui");
    glMultiTexCoordP4uiv  = (PFNGLMULTITEXCOORDP4UIVPROC)  wglGetProcAddress("glMultiTexCoordP4uiv");
    glNormalP3ui          = (PFNGLNORMALP3UIPROC)          wglGetProcAddress("glNormalP3ui");
    glNormalP3uiv         = (PFNGLNORMALP3UIVPROC)         wglGetProcAddress("glNormalP3uiv");
    glColorP3ui           = (PFNGLCOLORP3UIPROC)           wglGetProcAddress("glColorP3ui");
    glColorP3uiv          = (PFNGLCOLORP3UIVPROC)          wglGetProcAddress("glColorP3uiv"); 
    glColorP4ui           = (PFNGLCOLORP4UIPROC)           wglGetProcAddress("glColorP4ui");
    glColorP4uiv          = (PFNGLCOLORP4UIVPROC)          wglGetProcAddress("glColorP4uiv"); 
    glSecondaryColorP3ui  = (PFNGLSECONDARYCOLORP3UIPROC)  wglGetProcAddress("glSecondaryColorP3ui");
    glSecondaryColorP3uiv = (PFNGLSECONDARYCOLORP3UIVPROC) wglGetProcAddress("glSecondaryColorP3uiv");
    glVertexAttribP1ui    = (PFNGLVERTEXATTRIBP1UIPROC)    wglGetProcAddress("glVertexAttribP1ui");
    glVertexAttribP1uiv   = (PFNGLVERTEXATTRIBP1UIVPROC)   wglGetProcAddress("glVertexAttribP1uiv");
    glVertexAttribP2ui    = (PFNGLVERTEXATTRIBP2UIPROC)    wglGetProcAddress("glVertexAttribP2ui");
    glVertexAttribP2uiv   = (PFNGLVERTEXATTRIBP2UIVPROC)   wglGetProcAddress("glVertexAttribP2uiv");
    glVertexAttribP3ui    = (PFNGLVERTEXATTRIBP3UIPROC)    wglGetProcAddress("glVertexAttribP3ui");
    glVertexAttribP3uiv   = (PFNGLVERTEXATTRIBP3UIVPROC)   wglGetProcAddress("glVertexAttribP3uiv");
    glVertexAttribP4ui    = (PFNGLVERTEXATTRIBP4UIPROC)    wglGetProcAddress("glVertexAttribP4ui");
    glVertexAttribP4uiv   = (PFNGLVERTEXATTRIBP4UIVPROC)   wglGetProcAddress("glVertexAttribP4uiv");

    // GPU shader FP64
    glUniform1d          = (PFNGLUNIFORM1DPROC)          wglGetProcAddress("glUniform1d");
    glUniform2d          = (PFNGLUNIFORM2DPROC)          wglGetProcAddress("glUniform2d");
    glUniform3d          = (PFNGLUNIFORM3DPROC)          wglGetProcAddress("glUniform3d");
    glUniform4d          = (PFNGLUNIFORM4DPROC)          wglGetProcAddress("glUniform4d");
    glUniform1dv         = (PFNGLUNIFORM1DVPROC)         wglGetProcAddress("glUniform1dv");
    glUniform2dv         = (PFNGLUNIFORM2DVPROC)         wglGetProcAddress("glUniform2dv");
    glUniform3dv         = (PFNGLUNIFORM3DVPROC)         wglGetProcAddress("glUniform3dv");
    glUniform4dv         = (PFNGLUNIFORM4DVPROC)         wglGetProcAddress("glUniform4dv");
    glUniformMatrix2dv   = (PFNGLUNIFORMMATRIX2DVPROC)   wglGetProcAddress("glUniformMatrix2dv");
    glUniformMatrix3dv   = (PFNGLUNIFORMMATRIX3DVPROC)   wglGetProcAddress("glUniformMatrix3dv");
    glUniformMatrix4dv   = (PFNGLUNIFORMMATRIX4DVPROC)   wglGetProcAddress("glUniformMatrix4dv");
    glUniformMatrix2x3dv = (PFNGLUNIFORMMATRIX2X3DVPROC) wglGetProcAddress("glUniformMatrix2x3dv");
    glUniformMatrix2x4dv = (PFNGLUNIFORMMATRIX2X4DVPROC) wglGetProcAddress("glUniformMatrix2x4dv");
    glUniformMatrix3x2dv = (PFNGLUNIFORMMATRIX3X2DVPROC) wglGetProcAddress("glUniformMatrix3x2dv");
    glUniformMatrix3x4dv = (PFNGLUNIFORMMATRIX3X4DVPROC) wglGetProcAddress("glUniformMatrix3x4dv");
    glUniformMatrix4x2dv = (PFNGLUNIFORMMATRIX4X2DVPROC) wglGetProcAddress("glUniformMatrix4x2dv");
    glUniformMatrix4x3dv = (PFNGLUNIFORMMATRIX4X3DVPROC) wglGetProcAddress("glUniformMatrix4x3dv");
    glGetUniformdv       = (PFNGLGETUNIFORMDVPROC)       wglGetProcAddress("glGetUniformdv");

    // Shader subroutine
    glGetSubroutineUniformLocation   = (PFNGLGETSUBROUTINEUNIFORMLOCATIONPROC)   wglGetProcAddress("glGetSubroutineUniformLocation");
    glGetSubroutineIndex             = (PFNGLGETSUBROUTINEINDEXPROC)             wglGetProcAddress("glGetSubroutineIndex");
    glGetActiveSubroutineUniformiv   = (PFNGLGETACTIVESUBROUTINEUNIFORMIVPROC)   wglGetProcAddress("glGetActiveSubroutineUniformiv");
    glGetActiveSubroutineUniformName = (PFNGLGETACTIVESUBROUTINEUNIFORMNAMEPROC) wglGetProcAddress("glGetActiveSubroutineUniformName");
    glGetActiveSubroutineName        = (PFNGLGETACTIVESUBROUTINENAMEPROC)        wglGetProcAddress("glGetActiveSubroutineName");
    glUniformSubroutinesuiv          = (PFNGLUNIFORMSUBROUTINESUIVPROC)          wglGetProcAddress("glUniformSubroutinesuiv");
    glGetUniformSubroutineuiv        = (PFNGLGETUNIFORMSUBROUTINEUIVPROC)        wglGetProcAddress("glGetUniformSubroutineuiv");
    glGetProgramStageiv              = (PFNGLGETPROGRAMSTAGEIVPROC)              wglGetProcAddress("glGetProgramStageiv");

    // Draw indirect
    glDrawArraysIndirect   = (PFNGLDRAWARRAYSINDIRECTPROC)   wglGetProcAddress("glDrawArraysIndirect");
    glDrawElementsIndirect = (PFNGLDRAWELEMENTSINDIRECTPROC) wglGetProcAddress("glDrawElementsIndirect");

    // Minimum sample shading
    glMinSampleShadingARB = (PFNGLMINSAMPLESHADINGARBPROC) wglGetProcAddress("glMinSampleShadingARB");

    // Tessellation
    glPatchParameteri  = (PFNGLPATCHPARAMETERIPROC)  wglGetProcAddress("glPatchParameteri");
    glPatchParameterfv = (PFNGLPATCHPARAMETERFVPROC) wglGetProcAddress("glPatchParameterfv");

    // Transform feedback 2
    glBindTransformFeedback    = (PFNGLBINDTRANSFORMFEEDBACKPROC)    wglGetProcAddress("glBindTransformFeedback");
    glDeleteTransformFeedbacks = (PFNGLDELETETRANSFORMFEEDBACKSPROC) wglGetProcAddress("glDeleteTransformFeedbacks");
    glGenTransformFeedbacks    = (PFNGLGENTRANSFORMFEEDBACKSPROC)    wglGetProcAddress("glGenTransformFeedbacks");
    glIsTransformFeedback      = (PFNGLISTRANSFORMFEEDBACKPROC)      wglGetProcAddress("glIsTransformFeedback");
    glPauseTransformFeedback   = (PFNGLPAUSETRANSFORMFEEDBACKPROC)   wglGetProcAddress("glPauseTransformFeedback");
    glResumeTransformFeedback  = (PFNGLRESUMETRANSFORMFEEDBACKPROC)  wglGetProcAddress("glResumeTransformFeedback"); 
    glDrawTransformFeedback    = (PFNGLDRAWTRANSFORMFEEDBACKPROC)    wglGetProcAddress("glDrawTransformFeedback");

    // Transform feedback 3
    glDrawTransformFeedbackStream = (PFNGLDRAWTRANSFORMFEEDBACKSTREAMPROC) wglGetProcAddress("glDrawTransformFeedbackStream");
    glBeginQueryIndexed           = (PFNGLBEGINQUERYINDEXEDPROC)           wglGetProcAddress("glBeginQueryIndexed");
    glEndQueryIndexed             = (PFNGLENDQUERYINDEXEDPROC)             wglGetProcAddress("glEndQueryIndexed");
    glGetQueryIndexediv           = (PFNGLGETQUERYINDEXEDIVPROC)           wglGetProcAddress("glGetQueryIndexediv");

    // Draw buffers blend
    glBlendEquationiARB         = (PFNGLBLENDEQUATIONIARBPROC)         wglGetProcAddress("glBlendEquationiARB");
    glBlendEquationSeparateiARB = (PFNGLBLENDEQUATIONSEPARATEIARBPROC) wglGetProcAddress("glBlendEquationSeparateiARB");
    glBlendFunciARB             = (PFNGLBLENDFUNCIARBPROC)             wglGetProcAddress("glBlendFunciARB");
    glBlendFuncSeparateiARB     = (PFNGLBLENDFUNCSEPARATEIARBPROC)     wglGetProcAddress("glBlendFuncSeparateiARB");

    // Program binary
    glGetProgramBinary  = (PFNGLGETPROGRAMBINARYPROC)  wglGetProcAddress("glGetProgramBinary");
    glProgramBinary     = (PFNGLPROGRAMBINARYPROC)     wglGetProcAddress("glProgramBinary");
    glProgramParameteri = (PFNGLPROGRAMPARAMETERIPROC) wglGetProcAddress("glProgramParameteri");

    // Separate shader objects
    glUseProgramStages          = (PFNGLUSEPROGRAMSTAGESPROC)          wglGetProcAddress("glUseProgramStages");
    glActiveShaderProgram       = (PFNGLACTIVESHADERPROGRAMPROC)       wglGetProcAddress("glActiveShaderProgram");
    glCreateShaderProgramv      = (PFNGLCREATESHADERPROGRAMVPROC)      wglGetProcAddress("glCreateShaderProgramv");
    glBindProgramPipeline       = (PFNGLBINDPROGRAMPIPELINEPROC)       wglGetProcAddress("glBindProgramPipeline");
    glDeleteProgramPipelines    = (PFNGLDELETEPROGRAMPIPELINESPROC)    wglGetProcAddress("glDeleteProgramPipelines");
    glGenProgramPipelines       = (PFNGLGENPROGRAMPIPELINESPROC)       wglGetProcAddress("glGenProgramPipelines");
    glIsProgramPipeline         = (PFNGLISPROGRAMPIPELINEPROC)         wglGetProcAddress("glIsProgramPipeline");
    glGetProgramPipelineiv      = (PFNGLGETPROGRAMPIPELINEIVPROC)      wglGetProcAddress("glGetProgramPipelineiv");
    glProgramUniform1i          = (PFNGLPROGRAMUNIFORM1IPROC)          wglGetProcAddress("glProgramUniform1i");
    glProgramUniform1iv         = (PFNGLPROGRAMUNIFORM1IVPROC)         wglGetProcAddress("glProgramUniform1iv");
    glProgramUniform1f          = (PFNGLPROGRAMUNIFORM1FPROC)          wglGetProcAddress("glProgramUniform1f");
    glProgramUniform1fv         = (PFNGLPROGRAMUNIFORM1FVPROC)         wglGetProcAddress("glProgramUniform1fv");
    glProgramUniform1d          = (PFNGLPROGRAMUNIFORM1DPROC)          wglGetProcAddress("glProgramUniform1d");
    glProgramUniform1dv         = (PFNGLPROGRAMUNIFORM1DVPROC)         wglGetProcAddress("glProgramUniform1dv");
    glProgramUniform1ui         = (PFNGLPROGRAMUNIFORM1UIPROC)         wglGetProcAddress("glProgramUniform1ui");
    glProgramUniform1uiv        = (PFNGLPROGRAMUNIFORM1UIVPROC)        wglGetProcAddress("glProgramUniform1uiv");
    glProgramUniform2i          = (PFNGLPROGRAMUNIFORM2IPROC)          wglGetProcAddress("glProgramUniform2i");
    glProgramUniform2iv         = (PFNGLPROGRAMUNIFORM2IVPROC)         wglGetProcAddress("glProgramUniform2iv");
    glProgramUniform2f          = (PFNGLPROGRAMUNIFORM2FPROC)          wglGetProcAddress("glProgramUniform2f");
    glProgramUniform2fv         = (PFNGLPROGRAMUNIFORM2FVPROC)         wglGetProcAddress("glProgramUniform2fv");
    glProgramUniform2d          = (PFNGLPROGRAMUNIFORM2DPROC)          wglGetProcAddress("glProgramUniform2d");
    glProgramUniform2dv         = (PFNGLPROGRAMUNIFORM2DVPROC)         wglGetProcAddress("glProgramUniform2dv");
    glProgramUniform2ui         = (PFNGLPROGRAMUNIFORM2UIPROC)         wglGetProcAddress("glProgramUniform2ui");
    glProgramUniform2uiv        = (PFNGLPROGRAMUNIFORM2UIVPROC)        wglGetProcAddress("glProgramUniform2uiv");
    glProgramUniform3i          = (PFNGLPROGRAMUNIFORM3IPROC)          wglGetProcAddress("glProgramUniform3i");
    glProgramUniform3iv         = (PFNGLPROGRAMUNIFORM3IVPROC)         wglGetProcAddress("glProgramUniform3iv");
    glProgramUniform3f          = (PFNGLPROGRAMUNIFORM3FPROC)          wglGetProcAddress("glProgramUniform3f");
    glProgramUniform3fv         = (PFNGLPROGRAMUNIFORM3FVPROC)         wglGetProcAddress("glProgramUniform3fv");
    glProgramUniform3d          = (PFNGLPROGRAMUNIFORM3DPROC)          wglGetProcAddress("glProgramUniform3d");
    glProgramUniform3dv         = (PFNGLPROGRAMUNIFORM3DVPROC)         wglGetProcAddress("glProgramUniform3dv");
    glProgramUniform3ui         = (PFNGLPROGRAMUNIFORM3UIPROC)         wglGetProcAddress("glProgramUniform3ui");
    glProgramUniform3uiv        = (PFNGLPROGRAMUNIFORM3UIVPROC)        wglGetProcAddress("glProgramUniform3uiv");
    glProgramUniform4i          = (PFNGLPROGRAMUNIFORM4IPROC)          wglGetProcAddress("glProgramUniform4i");
    glProgramUniform4iv         = (PFNGLPROGRAMUNIFORM4IVPROC)         wglGetProcAddress("glProgramUniform4iv");
    glProgramUniform4f          = (PFNGLPROGRAMUNIFORM4FPROC)          wglGetProcAddress("glProgramUniform4f");
    glProgramUniform4fv         = (PFNGLPROGRAMUNIFORM4FVPROC)         wglGetProcAddress("glProgramUniform4fv");
    glProgramUniform4d          = (PFNGLPROGRAMUNIFORM4DPROC)          wglGetProcAddress("glProgramUniform4d");
    glProgramUniform4dv         = (PFNGLPROGRAMUNIFORM4DVPROC)         wglGetProcAddress("glProgramUniform4dv");
    glProgramUniform4ui         = (PFNGLPROGRAMUNIFORM4UIPROC)         wglGetProcAddress("glProgramUniform4ui");
    glProgramUniform4uiv        = (PFNGLPROGRAMUNIFORM4UIVPROC)        wglGetProcAddress("glProgramUniform4uiv");
    glProgramUniformMatrix2fv   = (PFNGLPROGRAMUNIFORMMATRIX2FVPROC)   wglGetProcAddress("glProgramUniformMatrix2fv");
    glProgramUniformMatrix3fv   = (PFNGLPROGRAMUNIFORMMATRIX3FVPROC)   wglGetProcAddress("glProgramUniformMatrix3fv");
    glProgramUniformMatrix4fv   = (PFNGLPROGRAMUNIFORMMATRIX4FVPROC)   wglGetProcAddress("glProgramUniformMatrix4fv");
    glProgramUniformMatrix2dv   = (PFNGLPROGRAMUNIFORMMATRIX2DVPROC)   wglGetProcAddress("glProgramUniformMatrix2dv");
    glProgramUniformMatrix3dv   = (PFNGLPROGRAMUNIFORMMATRIX3DVPROC)   wglGetProcAddress("glProgramUniformMatrix3dv");
    glProgramUniformMatrix4dv   = (PFNGLPROGRAMUNIFORMMATRIX4DVPROC)   wglGetProcAddress("glProgramUniformMatrix4dv");
    glProgramUniformMatrix2x3fv = (PFNGLPROGRAMUNIFORMMATRIX2X3FVPROC) wglGetProcAddress("glProgramUniformMatrix2x3fv");
    glProgramUniformMatrix3x2fv = (PFNGLPROGRAMUNIFORMMATRIX3X2FVPROC) wglGetProcAddress("glProgramUniformMatrix3x2fv");
    glProgramUniformMatrix2x4fv = (PFNGLPROGRAMUNIFORMMATRIX2X4FVPROC) wglGetProcAddress("glProgramUniformMatrix2x4fv");
    glProgramUniformMatrix4x2fv = (PFNGLPROGRAMUNIFORMMATRIX4X2FVPROC) wglGetProcAddress("glProgramUniformMatrix4x2fv");
    glProgramUniformMatrix3x4fv = (PFNGLPROGRAMUNIFORMMATRIX3X4FVPROC) wglGetProcAddress("glProgramUniformMatrix3x4fv");
    glProgramUniformMatrix4x3fv = (PFNGLPROGRAMUNIFORMMATRIX4X3FVPROC) wglGetProcAddress("glProgramUniformMatrix4x3fv");
    glProgramUniformMatrix2x3dv = (PFNGLPROGRAMUNIFORMMATRIX2X3DVPROC) wglGetProcAddress("glProgramUniformMatrix2x3dv");
    glProgramUniformMatrix3x2dv = (PFNGLPROGRAMUNIFORMMATRIX3X2DVPROC) wglGetProcAddress("glProgramUniformMatrix3x2dv");
    glProgramUniformMatrix2x4dv = (PFNGLPROGRAMUNIFORMMATRIX2X4DVPROC) wglGetProcAddress("glProgramUniformMatrix2x4dv");
    glProgramUniformMatrix4x2dv = (PFNGLPROGRAMUNIFORMMATRIX4X2DVPROC) wglGetProcAddress("glProgramUniformMatrix4x2dv");
    glProgramUniformMatrix3x4dv = (PFNGLPROGRAMUNIFORMMATRIX3X4DVPROC) wglGetProcAddress("glProgramUniformMatrix3x4dv");
    glProgramUniformMatrix4x3dv = (PFNGLPROGRAMUNIFORMMATRIX4X3DVPROC) wglGetProcAddress("glProgramUniformMatrix4x3dv");
    glValidateProgramPipeline   = (PFNGLVALIDATEPROGRAMPIPELINEPROC)   wglGetProcAddress("glValidateProgramPipeline");
    glGetProgramPipelineInfoLog = (PFNGLGETPROGRAMPIPELINEINFOLOGPROC) wglGetProcAddress("glGetProgramPipelineInfoLog");

    // ES2 compatibility
    glReleaseShaderCompiler    = (PFNGLRELEASESHADERCOMPILERPROC)     wglGetProcAddress("glReleaseShaderCompiler");
    glShaderBinary             = (PFNGLSHADERBINARYPROC)              wglGetProcAddress("glShaderBinary");
    glGetShaderPrecisionFormat = (PFNGLGETSHADERPRECISIONFORMATPROC)  wglGetProcAddress("glGetShaderPrecisionFormat");
    glDepthRangef              = (PFNGLDEPTHRANGEFPROC)               wglGetProcAddress("glDepthRangef");
    glClearDepthf              = (PFNGLCLEARDEPTHFPROC)               wglGetProcAddress("glClearDepthf");

    // Viewport array
    glViewportArrayv    = (PFNGLVIEWPORTARRAYVPROC)    wglGetProcAddress("glViewportArrayv");
    glViewportIndexedf  = (PFNGLVIEWPORTINDEXEDFPROC)  wglGetProcAddress("glViewportIndexedf");
    glViewportIndexedfv = (PFNGLVIEWPORTINDEXEDFVPROC) wglGetProcAddress("glViewportIndexedfv");
    glScissorArrayv     = (PFNGLSCISSORARRAYVPROC)     wglGetProcAddress("glScissorArrayv");
    glScissorIndexed    = (PFNGLSCISSORINDEXEDPROC)    wglGetProcAddress("glScissorIndexed");
    glScissorIndexedv   = (PFNGLSCISSORINDEXEDVPROC)   wglGetProcAddress("glScissorIndexedv");
    glDepthRangeArrayv  = (PFNGLDEPTHRANGEARRAYVPROC)  wglGetProcAddress("glDepthRangeArrayv");
    glDepthRangeIndexed = (PFNGLDEPTHRANGEINDEXEDPROC) wglGetProcAddress("glDepthRangeIndexed");
    glGetFloati_v       = (PFNGLGETFLOATI_VPROC)       wglGetProcAddress("glGetFloati_v");
    glGetDoublei_v      = (PFNGLGETDOUBLEI_VPROC)      wglGetProcAddress("glGetDoublei_v");

    // Atomic counters
    glGetActiveAtomicCounterBufferiv = (PFNGLGETACTIVEATOMICCOUNTERBUFFERIVPROC) wglGetProcAddress("glGetActiveAtomicCounterBufferiv");

    // Shader image load/store
    glBindImageTexture = (PFNGLBINDIMAGETEXTUREPROC) wglGetProcAddress("glBindImageTexture");
    glMemoryBarrier    = (PFNGLMEMORYBARRIERPROC)    wglGetProcAddress("glMemoryBarrier");

    // Texture storage
    glTexStorage1D        = (PFNGLTEXSTORAGE1DPROC)        wglGetProcAddress("glTexStorage1D");
    glTexStorage2D        = (PFNGLTEXSTORAGE2DPROC)        wglGetProcAddress("glTexStorage2D");
    glTexStorage3D        = (PFNGLTEXSTORAGE3DPROC)        wglGetProcAddress("glTexStorage3D");
    glTextureStorage1DEXT = (PFNGLTEXTURESTORAGE1DEXTPROC) wglGetProcAddress("glTextureStorage1DEXT");
    glTextureStorage2DEXT = (PFNGLTEXTURESTORAGE2DEXTPROC) wglGetProcAddress("glTextureStorage2DEXT");
    glTextureStorage3DEXT = (PFNGLTEXTURESTORAGE3DEXTPROC) wglGetProcAddress("glTextureStorage3DEXT");

    // Draw transform instanced
    glDrawTransformFeedbackInstanced       = (PFNGLDRAWTRANSFORMFEEDBACKINSTANCEDPROC)       wglGetProcAddress("glDrawTransformFeedbackInstanced");
    glDrawTransformFeedbackStreamInstanced = (PFNGLDRAWTRANSFORMFEEDBACKSTREAMINSTANCEDPROC) wglGetProcAddress("glDrawTransformFeedbackStreamInstanced");

    // Instanced rendering from indexed instance
    glDrawArraysInstancedBaseInstance             = (PFNGLDRAWARRAYSINSTANCEDBASEINSTANCEPROC)             wglGetProcAddress("glDrawArraysInstancedBaseInstance");
    glDrawElementsInstancedBaseInstance           = (PFNGLDRAWELEMENTSINSTANCEDBASEINSTANCEPROC)           wglGetProcAddress("glDrawElementsInstancedBaseInstance");
    glDrawElementsInstancedBaseVertexBaseInstance = (PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXBASEINSTANCEPROC) wglGetProcAddress("glDrawElementsInstancedBaseVertexBaseInstance");

    // Internal format query
    glGetInternalformativ = (PFNGLGETINTERNALFORMATIVPROC) wglGetProcAddress("glGetInternalformativ");

    // KHR debug
    glDebugMessageControl  = (PFNGLDEBUGMESSAGECONTROLPROC)  wglGetProcAddress("glDebugMessageControl"); 
    glDebugMessageInsert   = (PFNGLDEBUGMESSAGEINSERTPROC)   wglGetProcAddress("glDebugMessageInsert");
    glDebugMessageCallback = (PFNGLDEBUGMESSAGECALLBACKPROC) wglGetProcAddress("glDebugMessageCallback");
    glGetDebugMessageLog   = (PFNGLGETDEBUGMESSAGELOGPROC)   wglGetProcAddress("glGetDebugMessageLog");
    glPushDebugGroup       = (PFNGLPUSHDEBUGGROUPPROC)       wglGetProcAddress("glPushDebugGroup");
    glPopDebugGroup        = (PFNGLPOPDEBUGGROUPPROC)        wglGetProcAddress("glPopDebugGroup");
    glObjectLabel          = (PFNGLOBJECTLABELPROC)          wglGetProcAddress("glObjectLabel");
    glGetObjectLabel       = (PFNGLGETOBJECTLABELPROC)       wglGetProcAddress("glGetObjectLabel");
    glObjectPtrLabel       = (PFNGLOBJECTPTRLABELPROC)       wglGetProcAddress("glObjectPtrLabel");
    glGetObjectPtrLabel    = (PFNGLGETOBJECTPTRLABELPROC)    wglGetProcAddress("glGetObjectPtrLabel");

    // Clear buffer object
    glClearBufferData            = (PFNGLCLEARBUFFERDATAPROC)            wglGetProcAddress("glClearBufferData");
    glClearBufferSubData         = (PFNGLCLEARBUFFERSUBDATAPROC)         wglGetProcAddress("glClearBufferSubData");
    glClearNamedBufferDataEXT    = (PFNGLCLEARNAMEDBUFFERDATAEXTPROC)    wglGetProcAddress("glClearNamedBufferDataEXT");
    glClearNamedBufferSubDataEXT = (PFNGLCLEARNAMEDBUFFERSUBDATAEXTPROC) wglGetProcAddress("glClearNamedBufferSubDataEXT");

    // Compute shaders
    glDispatchCompute         = (PFNGLDISPATCHCOMPUTEPROC)          wglGetProcAddress("glDispatchCompute");
    glDispatchComputeIndirect = (PFNGLDISPATCHCOMPUTEINDIRECTPROC)  wglGetProcAddress("glDispatchComputeIndirect");

    // Image copy between image buffers
    glCopyImageSubData = (PFNGLCOPYIMAGESUBDATAPROC) wglGetProcAddress("glCopyImageSubData");

    // Rendering to framebuffer object w/o attachment
    glFramebufferParameteri             = (PFNGLFRAMEBUFFERPARAMETERIPROC)             wglGetProcAddress("glFramebufferParameteri");
    glGetFramebufferParameteriv         = (PFNGLGETFRAMEBUFFERPARAMETERIVPROC)         wglGetProcAddress("glGetFramebufferParameteriv");
    glNamedFramebufferParameteriEXT     = (PFNGLNAMEDFRAMEBUFFERPARAMETERIEXTPROC)     wglGetProcAddress("glNamedFramebufferParameteriEXT");
    glGetNamedFramebufferParameterivEXT = (PFNGLGETNAMEDFRAMEBUFFERPARAMETERIVEXTPROC) wglGetProcAddress("glGetNamedFramebufferParameterivEXT");

    // Generalized query for image formats
    glGetInternalformati64v = (PFNGLGETINTERNALFORMATI64VPROC) wglGetProcAddress("glGetInternalformati64v");

    // Invalidate data
    glInvalidateTexSubImage    = (PFNGLINVALIDATETEXSUBIMAGEPROC)    wglGetProcAddress("glInvalidateTexSubImage");
    glInvalidateTexImage       = (PFNGLINVALIDATETEXIMAGEPROC)       wglGetProcAddress("glInvalidateTexImage");
    glInvalidateBufferSubData  = (PFNGLINVALIDATEBUFFERSUBDATAPROC)  wglGetProcAddress("glInvalidateBufferSubData"); 
    glInvalidateBufferData     = (PFNGLINVALIDATEBUFFERDATAPROC)     wglGetProcAddress("glInvalidateBufferData");
    glInvalidateFramebuffer    = (PFNGLINVALIDATEFRAMEBUFFERPROC)    wglGetProcAddress("glInvalidateFramebuffer");
    glInvalidateSubFramebuffer = (PFNGLINVALIDATESUBFRAMEBUFFERPROC) wglGetProcAddress("glInvalidateSubFramebuffer");

    // Multi indirect draw calls from a single draw call
    glMultiDrawArraysIndirect   = (PFNGLMULTIDRAWARRAYSINDIRECTPROC)   wglGetProcAddress("glMultiDrawArraysIndirect");
    glMultiDrawElementsIndirect = (PFNGLMULTIDRAWELEMENTSINDIRECTPROC) wglGetProcAddress("glMultiDrawElementsIndirect");

    // Program object interface query
    glGetProgramInterfaceiv           = (PFNGLGETPROGRAMINTERFACEIVPROC)           wglGetProcAddress("glGetProgramInterfaceiv");
    glGetProgramResourceIndex         = (PFNGLGETPROGRAMRESOURCEINDEXPROC)         wglGetProcAddress("glGetProgramResourceIndex");
    glGetProgramResourceName          = (PFNGLGETPROGRAMRESOURCENAMEPROC)          wglGetProcAddress("glGetProgramResourceName");
    glGetProgramResourceiv            = (PFNGLGETPROGRAMRESOURCEIVPROC)            wglGetProcAddress("glGetProgramResourceiv");
    glGetProgramResourceLocation      = (PFNGLGETPROGRAMRESOURCELOCATIONPROC)      wglGetProcAddress("glGetProgramResourceLocation");
    glGetProgramResourceLocationIndex = (PFNGLGETPROGRAMRESOURCELOCATIONINDEXPROC) wglGetProcAddress("glGetProgramResourceLocationIndex");

    // Buffer object read-write access from shader
    glShaderStorageBlockBinding = (PFNGLSHADERSTORAGEBLOCKBINDINGPROC) wglGetProcAddress("glShaderStorageBlockBinding");

    // Texture buffer range
    glTexBufferRange        = (PFNGLTEXBUFFERRANGEPROC)        wglGetProcAddress("glTexBufferRange");
    glTextureBufferRangeEXT = (PFNGLTEXTUREBUFFERRANGEEXTPROC) wglGetProcAddress("glTextureBufferRangeEXT");

    // Immutable storage for multisample textures
    glTexStorage2DMultisample        = (PFNGLTEXSTORAGE2DMULTISAMPLEPROC)        wglGetProcAddress("glTexStorage2DMultisample");
    glTexStorage3DMultisample        = (PFNGLTEXSTORAGE3DMULTISAMPLEPROC)        wglGetProcAddress("glTexStorage3DMultisample");
    glTextureStorage2DMultisampleEXT = (PFNGLTEXTURESTORAGE2DMULTISAMPLEEXTPROC) wglGetProcAddress("glTextureStorage2DMultisampleEXT");
    glTextureStorage3DMultisampleEXT = (PFNGLTEXTURESTORAGE3DMULTISAMPLEEXTPROC) wglGetProcAddress("glTextureStorage3DMultisampleEXT");

    // Texture views
    glTextureView = (PFNGLTEXTUREVIEWPROC) wglGetProcAddress("glTextureView");

    // Separation of vertex format from buffer object
    glBindVertexBuffer                   = (PFNGLBINDVERTEXBUFFERPROC)                   wglGetProcAddress("glBindVertexBuffer");
    glVertexAttribFormat                 = (PFNGLVERTEXATTRIBFORMATPROC)                 wglGetProcAddress("glVertexAttribFormat");
    glVertexAttribIFormat                = (PFNGLVERTEXATTRIBIFORMATPROC)                wglGetProcAddress("glVertexAttribIFormat");
    glVertexAttribLFormat                = (PFNGLVERTEXATTRIBLFORMATPROC)                wglGetProcAddress("glVertexAttribLFormat");
    glVertexAttribBinding                = (PFNGLVERTEXATTRIBBINDINGPROC)                wglGetProcAddress("glVertexAttribBinding");
    glVertexBindingDivisor               = (PFNGLVERTEXBINDINGDIVISORPROC)               wglGetProcAddress("glVertexBindingDivisor");
    glVertexArrayBindVertexBufferEXT     = (PFNGLVERTEXARRAYBINDVERTEXBUFFEREXTPROC)     wglGetProcAddress("glVertexArrayBindVertexBufferEXT");
    glVertexArrayVertexAttribFormatEXT   = (PFNGLVERTEXARRAYVERTEXATTRIBFORMATEXTPROC)   wglGetProcAddress("glVertexArrayVertexAttribFormatEXT");
    glVertexArrayVertexAttribIFormatEXT  = (PFNGLVERTEXARRAYVERTEXATTRIBIFORMATEXTPROC)  wglGetProcAddress("glVertexArrayVertexAttribIFormatEXT"); 
    glVertexArrayVertexAttribLFormatEXT  = (PFNGLVERTEXARRAYVERTEXATTRIBLFORMATEXTPROC)  wglGetProcAddress("glVertexArrayVertexAttribLFormatEXT"); 
    glVertexArrayVertexAttribBindingEXT  = (PFNGLVERTEXARRAYVERTEXATTRIBBINDINGEXTPROC)  wglGetProcAddress("glVertexArrayVertexAttribBindingEXT"); 
    glVertexArrayVertexBindingDivisorEXT = (PFNGLVERTEXARRAYVERTEXBINDINGDIVISOREXTPROC) wglGetProcAddress("glVertexArrayVertexBindingDivisorEXT");

}

